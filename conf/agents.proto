// Format this file with clang after editing:
//   clang-format-8 conf/*.proto -i
syntax = "proto2";
package fairdiplomacy;

message MilaSlAgent {
  // Optional. Softmax temperature
  optional float temperature = 1;
}

message RandomAgent {}

message DipnetAgent {
  // Required. Path to DipNet checkpoint.
  optional string model_path = 1;

  // Optional. Softmax temperature
  optional float temperature = 2;

  // Optional. Share of probability mass to keep for sampling.
  optional float top_p = 3 [ default = 1.0 ];

  optional bool has_press = 4;
}

message CFR1PAgent {
  // Path to DipNet checkpoint.
  optional string model_path = 1;

  // Size of rollout process pool
  optional uint32 n_rollout_procs = 2;

  // Number of postman server processes to launch
  optional uint32 n_server_procs = 3;

  // Distribute server processes over multiple GPUs
  optional uint32 n_gpu = 4;

  // Model server maximum batch size
  optional uint32 max_batch_size = 5;

  // Number of CFR iterations
  optional uint32 n_rollouts = 6;

  // Maximum rollout length in MOVEMENT PHASES heuristically evaluating the game
  optional uint32 max_rollout_length = 7;

  // If true, use model predicted final scores in heuristic evalauation
  // If false, use current SC counts after max_rollout_length steps
  optional bool use_predicted_final_scores = 8;

  // Number of order-sets (actions) to consider at each step in search code
  optional uint32 n_plausible_orders = 9;

  // Temperature used for rollouts
  optional float rollout_temperature = 10;

  // If true, set postman batch size and use wait_till_full
  optional bool postman_sync_batches = 11;

  // Optional host:port for model server
  optional string use_server_addr = 12;

  // CUDA device to use, if > 0
  optional int32 device = 13 [ default = -1 ];

  // Optional float 0 - 1 to mix in raw sum of squares ratio
  optional float mix_square_ratio_scoring = 14;

  // Optional, # of rollouts to run in parallel for each possible action
  optional uint32 average_n_rollouts = 15;

  // Optional. Nucleus ratio used for rollouts. During nucleus sampling only the
  // smallest subset of actions that has probability at least top_p is
  // considered. All other actions are never sampled.
  optional float rollout_top_p = 16;

  // Optional, limit number of actions to consider as a ratio of # units
  // # plausible actions = min(ceil(max_actions_units_ratio * #units),
  // n_plausible_orders)
  optional float max_actions_units_ratio = 17 [ default = -1 ];

  // Optional, if True, sample from final iter instead of average iter
  optional bool use_final_iter = 18 [ default = true ];

  // Optional: separate model path to compute the value function
  optional string value_model_path = 19;

  // Optional host:port for value model server
  optional string use_value_server_addr = 20;

  optional uint32 plausible_orders_req_size = 21 [ default = 0 ];

  // Optional, if True, prune actions after 1/4 of the number of iters
  optional bool use_pruning = 22 [ default = false ];

  // Optional, if >0 then play BP strategy for this many iters
  optional int32 bp_iters = 23 [ default = 0 ];

  // Optional, if >0 then play BP strategy for this many iters
  optional float bp_prob = 24 [ default = 0 ];

  // Optional, if >0, then at each rollout step will use the current
  // model-predicted value as this fraction of the final estimate
  // (i.e. exponentially decaying effect of rollouts of increasing length)
  optional float rollout_value_frac = 25 [ default = 0 ];

  optional bool cache_rollout_results = 26 [ default = false ];

  // Debugging for situation check tests only
  // Use the seed for plausible actions, then pick a random seed for rollouts
  optional bool reset_seed_on_rollout = 27 [ default = false ];

  // If this power is a loser, i.e. its action values are less
  // this this value, then this power plays blueprint.
  optional float loser_bp_value = 28 [ default = 0 ];

  // First CFR iteration to start following loser_bp_value
  // (we need a few iterations to accurately estimate the action values)
  optional float loser_bp_iter = 29 [ default = 64 ];

  // Optional. Enables optimization on clonning dipcc.Game objects.
  optional bool clear_old_all_possible_orders = 30;

  // Optional. If set and a call to compute strategy for several agents is done
  // (e.g., in compare agents), then CFR is run only once.
  optional bool share_strategy = 31;
}

message BRSearchAgent {
  // Path to DipNet checkpoint.
  optional string model_path = 1;

  // Size of rollout process pool
  optional uint32 n_rollout_procs = 2;

  // Number of postman server processes to launch
  optional uint32 n_server_procs = 3;

  // Distribute server processes over multiple GPUs
  optional uint32 n_gpu = 4;

  // Model server maximum batch size
  optional uint32 max_batch_size = 5;

  // Number of rollouts per plausible order
  optional uint32 rollouts_per_plausible_order = 6;

  // Maximum rollout length in MOVEMENT PHASES heuristically evaluating the game
  optional uint32 max_rollout_length = 7;

  // If true, use model predicted final scores in heuristic evalauation
  // If false, use current SC counts after max_rollout_length steps
  optional bool use_predicted_final_scores = 8;

  // Number of order-sets (actions) to consider at each step in search code
  optional uint32 n_plausible_orders = 9;

  // Temperature used for rollouts
  optional float rollout_temperature = 10;
}

message CE1PAgent {
  // Path to DipNet checkpoint.
  optional string model_path = 1;

  // Size of rollout process pool
  optional uint32 n_rollout_procs = 2;

  // Number of postman server processes to launch
  optional uint32 n_server_procs = 3;

  // Distribute server processes over multiple GPUs
  optional uint32 n_gpu = 4;

  // Model server maximum batch size
  optional uint32 max_batch_size = 5;

  // Number of CFR iterations
  optional uint32 n_rollouts = 6;

  // Maximum rollout length in MOVEMENT PHASES heuristically evaluating the game
  optional uint32 max_rollout_length = 7;

  // If true, use model predicted final scores in heuristic evalauation
  // If false, use current SC counts after max_rollout_length steps
  optional bool use_predicted_final_scores = 8;

  // Number of order-sets (actions) to consider at each step in search code
  optional uint32 n_plausible_orders = 9;

  // Temperature used for rollouts
  optional float rollout_temperature = 10;
}

message FP1PAgent {
  // Path to DipNet checkpoint.
  optional string model_path = 1;

  // Size of rollout process pool
  optional uint32 n_rollout_procs = 2;

  // Number of postman server processes to launch
  optional uint32 n_server_procs = 3;

  // Distribute server processes over multiple GPUs
  optional uint32 n_gpu = 4;

  // Model server maximum batch size
  optional uint32 max_batch_size = 5;

  // Number of CFR iterations
  optional uint32 n_rollouts = 6;

  // Maximum rollout length in MOVEMENT PHASES heuristically evaluating the game
  optional uint32 max_rollout_length = 7;

  // If true, use model predicted final scores in heuristic evalauation
  // If false, use current SC counts after max_rollout_length steps
  optional bool use_predicted_final_scores = 8;

  // Number of order-sets (actions) to consider at each step in search code
  optional uint32 n_plausible_orders = 9;

  // Temperature used for rollouts
  optional float rollout_temperature = 10;

  // If true, set postman batch size and use wait_till_full
  optional bool postman_sync_batches = 11;

  // Optional host:port for model server
  optional string use_server_addr = 12;

  // CUDA device to use, if > 0
  optional int32 device = 13 [ default = -1 ];

  // Optional float 0 - 1 to mix in raw sum of squares ratio
  optional float mix_square_ratio_scoring = 14;

  // Optional, # of rollouts to run in parallel for each possible action
  optional uint32 average_n_rollouts = 15;

  // Optional. Nucleus ratio used for rollouts. During nucleus sampling only the
  // smallest subset of actions that has probability at least top_p is
  // considered. All other actions are never sampled.
  optional float rollout_top_p = 16;

  // Optional, limit number of actions to consider as a ratio of # units
  // # plausible actions = min(ceil(max_actions_units_ratio * #units),
  // n_plausible_orders)
  optional float max_actions_units_ratio = 17 [ default = -1 ];

  // Optional, if True, sample from final iter instead of average iter
  optional bool use_final_iter = 18 [ default = true ];

  // Optional: separate model path to compute the value function
  optional string value_model_path = 19;

  // Optional host:port for value model server
  optional string use_value_server_addr = 20;

  optional uint32 plausible_orders_req_size = 21 [ default = 0 ];

  // Optional, if True, prune actions after 1/4 of the number of iters
  // optional bool use_pruning = 22 [ default = false ];

  // Optional, if >0 then play BP strategy for this many iters
  optional int32 bp_iters = 23 [ default = 0 ];

  // Optional, if >0 then play BP strategy for this many iters
  optional float bp_prob = 24 [ default = 0 ];

  // Optional, if >0, then at each rollout step will use the current
  // model-predicted value as this fraction of the final estimate
  // (i.e. exponentially decaying effect of rollouts of increasing length)
  optional float rollout_value_frac = 25 [ default = 0 ];

  // Optional. If >0 then cache results after averaging results
  // for a set of orders this many times
  optional uint32 cache_rollout_results = 26 [ default = 0 ];
}

message ReproAgent {
  // Required, path to game.json file
  optional string game_path = 1;
}

message Agent {
  oneof agent {
    MilaSlAgent mila = 1;
    RandomAgent random = 2;
    DipnetAgent dipnet = 3;
    CFR1PAgent cfr1p = 4;
    BRSearchAgent br_search = 5;
    CE1PAgent ce1p = 6;
    ReproAgent repro = 7;
    FP1PAgent fp1p = 8;
  }
}
