
// This file is auto-generated by render_equivalence_test.py
//
#include <algorithm>
#include <vector>
#include "../cc/game.h"
#include "../cc/hash.h"
#include "../cc/thirdparty/nlohmann/json.hpp"
#include "consts.h"
#include "utils.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"

using namespace std;
using nlohmann::json;

namespace dipcc {

class GameEquivalenceTest : public ::testing::Test {};

TEST_F(GameEquivalenceTest, Test__checkpoint_jsgray_diplomacy_mila_dataset_data__game_81754_json) {

Game game;


LOG(INFO) << "\nTesting state: S1901M ";
{ // state tests: S1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A BUD", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F LON", "F EDI", "A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "A PAR", "F BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER", "A MUN", "F KIE"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VEN", "A ROM", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A WAR", "F SEV", "F STP/SC"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F ANK", "A SMY"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"TRI", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "PAR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "MOS", "WAR", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"ANK", "SMY", "CON"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1901M
LOG(INFO) << "\nPreparing to process: S1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"F TRI - VEN", "A VIE - GAL", "A BUD S A VIE - GAL"});
game.set_orders("ENGLAND", {"A LVP - EDI", "F LON - NTH", "F EDI - NWG"});
game.set_orders("FRANCE", {"A PAR - PIC", "F BRE - MAO", "A MAR H"});
game.set_orders("GERMANY", {"A BER - PRU", "F KIE - DEN", "A MUN - SIL"});
game.set_orders("ITALY", {"A VEN - TRI", "F NAP - ION", "A ROM - APU"});
game.set_orders("RUSSIA", {"A WAR - GAL", "F STP/SC - BOT", "F SEV - RUM", "A MOS - STP"});
game.set_orders("TURKEY", {"F ANK - CON", "A CON - BUL", "A SMY - ARM"});
game.process();

LOG(INFO) << "\nTesting state: F1901M ";
{ // state tests: F1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "A GAL", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI", "F NWG", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F MAO", "A PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU", "F DEN", "A SIL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A VEN", "A APU"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT", "F RUM", "A WAR", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "F CON", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"TRI", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "PAR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "MOS", "WAR", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"ANK", "SMY", "CON"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1901M
LOG(INFO) << "\nPreparing to process: F1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"A GAL - RUM", "A BUD - SER", "F TRI H"});
game.set_orders("ENGLAND", {"F NTH C A EDI - NWY", "A EDI - NWY VIA", "F NWG S A EDI - NWY"});
game.set_orders("FRANCE", {"F MAO - POR", "A PIC - BEL", "A MAR - SPA"});
game.set_orders("GERMANY", {"A SIL - WAR", "F DEN - SWE", "A PRU S A SIL - WAR"});
game.set_orders("ITALY", {"F ION C A APU - TUN", "A APU - TUN VIA", "A VEN H"});
game.set_orders("RUSSIA", {"F RUM - SEV", "A WAR - GAL", "F BOT - SWE", "A STP - NWY"});
game.set_orders("TURKEY", {"A BUL - GRE", "F CON - BUL/SC", "A ARM H"});
game.process();

LOG(INFO) << "\nTesting state: W1901A ";
{ // state tests: W1901A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1901A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A RUM", "A SER", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A NWY", "F NWG", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F POR", "A SPA", "A BEL"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU", "F DEN", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A VEN", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SEV", "F BOT", "A GAL", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "F BUL/SC", "A GRE"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"NWY", "LVP", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "VEN", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "MOS", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1901A
LOG(INFO) << "\nPreparing to process: W1901A ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE B", "A BUD B"});
game.set_orders("ENGLAND", {"A LON B"});
game.set_orders("FRANCE", {"A PAR B", "F BRE B", "F MAR B"});
game.set_orders("GERMANY", {"A KIE B", "A MUN B"});
game.set_orders("ITALY", {"F NAP B"});
game.set_orders("RUSSIA", {"A GAL D"});
game.set_orders("TURKEY", {"F CON B", "F SMY B"});
game.process();

LOG(INFO) << "\nTesting state: S1902M ";
{ // state tests: S1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F TRI", "A RUM", "A VIE", "A BUD", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LON", "A NWY", "F NWG", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F POR", "F MAR", "A PAR", "A SPA", "F BRE", "A BEL"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A PRU", "F DEN", "A MUN", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A VEN", "F NAP", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT", "F SEV", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F SMY", "A ARM", "F BUL/SC", "F CON", "A GRE"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"NWY", "LVP", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "VEN", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "MOS", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1902M
LOG(INFO) << "\nPreparing to process: S1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"A SER - TRI", "F TRI - ADR", "A VIE - TYR", "A RUM S A ARM - SEV", "A BUD S A SER - TRI"});
game.set_orders("ENGLAND", {"F NTH C A LON - NWY", "A NWY - SWE", "A LON - NWY VIA", "F NWG S A LON - NWY"});
game.set_orders("FRANCE", {"A SPA - MAR", "F POR - SPA/SC", "F MAR - LYO", "A PAR - BUR", "F BRE - MAO", "A BEL H"});
game.set_orders("GERMANY", {"A KIE - HOL", "A MUN - TYR", "A PRU - LVN", "A WAR S A PRU - LVN", "F DEN S A NWY - SWE"});
game.set_orders("ITALY", {"F ION - EAS", "F NAP - ION", "A TUN H", "A VEN H"});
game.set_orders("RUSSIA", {"F SEV - RUM", "A STP - NWY", "F BOT - SWE"});
game.set_orders("TURKEY", {"F SMY - EAS", "A ARM - SEV", "F CON - BLA", "F BUL/SC - AEG", "A GRE H"});
game.process();

LOG(INFO) << "\nTesting state: F1902M ";
{ // state tests: F1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A RUM", "A VIE", "A BUD", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A NWY", "A SWE", "F NWG", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A BUR", "F MAO", "A MAR", "A BEL", "F SPA/SC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F DEN", "A MUN", "A LVN", "A HOL", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A VEN", "F NAP", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F SMY", "F AEG", "F BLA", "A SEV", "A GRE"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"NWY", "LVP", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "VEN", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "MOS", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1902M
LOG(INFO) << "\nPreparing to process: F1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ADR - VEN", "A BUD - GAL", "A VIE - TYR", "A RUM S A BUD - GAL", "A TRI S F ADR - VEN"});
game.set_orders("ENGLAND", {"A NWY - STP", "F NWG - BAR", "F NTH H", "A SWE S A NWY - FIN"});
game.set_orders("FRANCE", {"A MAR - PIE", "A BEL - BUR", "A BUR - MAR", "F MAO - WES", "F LYO S A MAR - PIE", "F SPA/SC S F MAO - WES"});
game.set_orders("GERMANY", {"A MUN - TYR", "A LVN - MOS", "A WAR S A LVN - MOS", "A HOL H", "F DEN H"});
game.set_orders("ITALY", {"F NAP - TYS", "A TUN H", "A VEN H", "F ION S F NAP - TYS"});
game.set_orders("RUSSIA", {"A STP - MOS", "F BOT - STP/SC"});
game.set_orders("TURKEY", {"F SMY - EAS", "F BLA - BUL/EC", "A GRE - BUL", "A SEV S A STP - MOS", "F AEG S F SMY - EAS"});
game.process();

LOG(INFO) << "\nTesting state: F1902R ";
{ // state tests: F1902R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1902R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A RUM", "A VIE", "F VEN", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "A NWY", "F BAR", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A BUR", "A MAR", "F WES", "A PIE", "F SPA/SC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F DEN", "A MUN", "A LVN", "A HOL", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "F TYS", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F AEG", "F EAS", "F BLA", "A SEV", "A GRE"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"NWY", "LVP", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "VEN", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "MOS", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1902R
LOG(INFO) << "\nPreparing to process: F1902R ";

// Submit orders
game.set_orders("ITALY", {"A VEN R ROM"});
game.process();

LOG(INFO) << "\nTesting state: W1902A ";
{ // state tests: W1902A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1902A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A RUM", "A VIE", "F VEN", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "A NWY", "F BAR", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A BUR", "A MAR", "F WES", "A PIE", "F SPA/SC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F DEN", "A MUN", "A LVN", "A HOL", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A ROM", "F TYS", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F AEG", "F EAS", "F BLA", "A SEV", "A GRE"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1902A
LOG(INFO) << "\nPreparing to process: W1902A ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD B"});
game.set_orders("ENGLAND", {"A LON B"});
game.set_orders("GERMANY", {"A KIE B"});
game.set_orders("ITALY", {"F TYS D"});
game.set_orders("TURKEY", {"F CON B"});
game.process();

LOG(INFO) << "\nTesting state: S1903M ";
{ // state tests: S1903M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1903M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A RUM", "A VIE", "A BUD", "F VEN", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BAR", "A NWY", "A LON", "A SWE", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A BUR", "A MAR", "F WES", "A PIE", "F SPA/SC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "F DEN", "A MUN", "A LVN", "A HOL", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A ROM", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F AEG", "F EAS", "F CON", "F BLA", "A SEV", "A GRE"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1903M
LOG(INFO) << "\nPreparing to process: S1903M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD - GAL", "A VIE - TYR", "A GAL - SIL", "A RUM - UKR", "A TRI S A VIE - TYR", "F VEN H"});
game.set_orders("ENGLAND", {"F NTH C A LON - NWY", "A LON - NWY VIA", "F BAR - STP/NC", "A NWY - FIN", "A SWE S A NWY - FIN"});
game.set_orders("FRANCE", {"A MAR - PIE", "F SPA/SC - WES", "F WES - TYS", "A PIE - TUS", "A BUR H", "F LYO S F WES - TYS"});
game.set_orders("GERMANY", {"F DEN - BAL", "A HOL - KIE", "A KIE - MUN", "A MUN - SIL", "A WAR - MOS", "A LVN S A WAR - MOS"});
game.set_orders("ITALY", {"F ION - TYS", "A ROM H", "A TUN H"});
game.set_orders("RUSSIA", {"A STP - MOS", "F BOT - LVN"});
game.set_orders("TURKEY", {"F AEG - ION", "F CON - BUL/SC", "F BLA - CON", "F EAS S F AEG - ION", "A SEV S A RUM - UKR", "A GRE H"});
game.process();

LOG(INFO) << "\nTesting state: S1903R ";
{ // state tests: S1903R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1903R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TRI", "A BUD", "A UKR", "F VEN", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BAR", "A FIN", "A NWY", "A SWE", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A BUR", "A TUS", "F WES", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A MUN", "A LVN", "A HOL", "F BAL", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BUL/SC", "F EAS", "F CON", "A SEV", "A GRE"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1903R
LOG(INFO) << "\nPreparing to process: S1903R ";

// Submit orders
game.set_orders("ITALY", {"F ION R NAP"});
game.process();

LOG(INFO) << "\nTesting state: F1903M ";
{ // state tests: F1903M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1903M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TRI", "A BUD", "A UKR", "F VEN", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BAR", "A FIN", "A NWY", "A SWE", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A BUR", "A TUS", "F WES", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A MUN", "A LVN", "A HOL", "F BAL", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "F NAP", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BUL/SC", "F EAS", "F CON", "A SEV", "A GRE"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1903M
LOG(INFO) << "\nPreparing to process: F1903M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD - VIE", "A GAL - WAR", "A TRI - VEN", "F VEN - ADR", "A UKR - MOS", "A TYR S A TRI - VEN"});
game.set_orders("ENGLAND", {"A FIN - STP", "A NWY S A FIN - STP", "F NTH H", "A SWE H", "F BAR S A FIN - STP"});
game.set_orders("FRANCE", {"F WES - TUN", "A PIE - TUS", "A TUS - ROM", "F TYS S F WES - TUN", "A BUR H", "F LYO S F TYS"});
game.set_orders("GERMANY", {"F BAL - BOT", "A HOL - KIE", "A MUN - SIL", "A KIE - BER", "A WAR - MOS", "A LVN S A WAR - MOS"});
game.set_orders("ITALY", {"F NAP - TYS", "A ROM H", "A TUN H"});
game.set_orders("RUSSIA", {"F BOT - STP/SC", "A STP - MOS"});
game.set_orders("TURKEY", {"F ION C A GRE - APU", "F CON - AEG", "F BUL/SC - GRE", "A GRE - APU VIA", "F EAS S F CON - AEG", "A SEV S A UKR - MOS"});
game.process();

LOG(INFO) << "\nTesting state: W1903A ";
{ // state tests: W1903A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1903A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A VIE", "A VEN", "F ADR", "A UKR", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NTH", "F BAR", "A NWY", "A SWE", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A BUR", "A TUS", "F WES", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A LVN", "A BER", "F BAL", "A SIL", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "F NAP", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F ION", "A APU", "F EAS", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1903A
LOG(INFO) << "\nPreparing to process: W1903A ";

// Submit orders
game.set_orders("ENGLAND", {"F LON B"});
game.process();

LOG(INFO) << "\nTesting state: S1904M ";
{ // state tests: S1904M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1904M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A VIE", "A VEN", "F ADR", "A UKR", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NTH", "F BAR", "F LON", "A NWY", "A SWE", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A BUR", "A TUS", "F WES", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A LVN", "A BER", "F BAL", "A SIL", "A WAR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "F NAP", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F ION", "A APU", "F EAS", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1904M
LOG(INFO) << "\nPreparing to process: S1904M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VEN - ROM", "A GAL - WAR", "A TYR - MUN", "F ADR - VEN", "A VIE - BOH", "A UKR S A GAL - WAR"});
game.set_orders("ENGLAND", {"F NTH C A NWY - LON", "A NWY - LON VIA", "F LON - ENG", "F BAR - NWG", "A STP H", "A SWE H"});
game.set_orders("FRANCE", {"F LYO C A PIE - NAF", "F WES C A PIE - NAF", "A BUR - MAR", "A PIE - NAF VIA", "F TYS S A TUS - ROM", "A TUS H"});
game.set_orders("GERMANY", {"A WAR - MOS", "A KIE - MUN", "A SIL - BOH", "A BER S A KIE - MUN", "F BAL H", "A LVN S A WAR - MOS"});
game.set_orders("ITALY", {"F NAP S A ROM", "A TUN H", "A ROM S F NAP"});
game.set_orders("RUSSIA", {"F BOT - STP/SC"});
game.set_orders("TURKEY", {"F ION - NAP", "F EAS - ION", "A APU S F ION - NAP", "A SEV S A UKR - MOS", "F AEG S F EAS - ION", "F GRE S F EAS - ION"});
game.process();

LOG(INFO) << "\nTesting state: F1904M ";
{ // state tests: F1904M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1904M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A VIE", "A VEN", "F ADR", "A UKR", "A WAR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NTH", "F ENG", "A LON", "A SWE", "F NWG", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A MAR", "A TUS", "A NAF", "F WES", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A MUN", "A LVN", "A BER", "F BAL", "A SIL", "A MOS"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F NAP", "F ION", "A APU", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "WAR", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1904M
LOG(INFO) << "\nPreparing to process: F1904M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ADR - VEN", "A VIE - GAL", "A TYR - BOH", "A VEN - ROM", "A WAR S A SEV - MOS", "A UKR S A WAR"});
game.set_orders("ENGLAND", {"F ENG - MAO", "F NTH - ENG", "F NWG - NTH", "A SWE H", "A LON H", "A STP S A MOS"});
game.set_orders("FRANCE", {"A MAR - PIE", "F WES - TUN", "A TUS - ROM", "F TYS S A TUS - ROM", "F LYO S F TYS", "A NAF S F WES - TUN"});
game.set_orders("GERMANY", {"A SIL - BOH", "A BER - PRU", "A MUN S A SIL - BOH", "A LVN S A MOS", "A MOS H", "F BAL S A BER - PRU"});
game.set_orders("ITALY", {"A ROM - VEN", "A TUN H"});
game.set_orders("RUSSIA", {"F BOT - BAL"});
game.set_orders("TURKEY", {"A SEV - MOS", "F ION - TYS", "F AEG - ION", "F GRE S F AEG - ION", "A APU S A VEN - ROM", "F NAP S A VEN - ROM"});
game.process();

LOG(INFO) << "\nTesting state: W1904A ";
{ // state tests: W1904A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1904A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "F VEN", "A ROM", "A UKR", "A WAR", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F MAO", "A LON", "A SWE", "A STP", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "F TUN", "A NAF", "A TUS", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU", "A MUN", "A LVN", "F BAL", "A MOS", "A BOH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F NAP", "F ION", "A APU", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "ROM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "TUN", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "MOS", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1904A
LOG(INFO) << "\nPreparing to process: W1904A ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE B", "A TRI B"});
game.set_orders("FRANCE", {"F MAR B"});
game.set_orders("RUSSIA", {"F BOT D"});
game.set_orders("TURKEY", {"F SMY B"});
game.process();

LOG(INFO) << "\nTesting state: S1905M ";
{ // state tests: S1905M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1905M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "F VEN", "A ROM", "A TRI", "A VIE", "A UKR", "A WAR", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F MAO", "A LON", "A SWE", "A STP", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "F MAR", "F TUN", "A NAF", "A TUS", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU", "A MUN", "A LVN", "F BAL", "A MOS", "A BOH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F NAP", "F SMY", "F ION", "A APU", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "ROM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "TUN", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "MOS", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1905M
LOG(INFO) << "\nPreparing to process: S1905M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE - BOH", "A ROM - VEN", "F VEN - ADR", "A TYR - MUN", "A WAR - SIL", "A UKR - MOS", "A TRI S A ROM - VEN", "A GAL S A VIE - BOH"});
game.set_orders("ENGLAND", {"F ENG C A LON - PIC", "A SWE - NWY", "A LON - PIC VIA", "F MAO - SPA/SC", "A STP H", "F NTH H"});
game.set_orders("FRANCE", {"F LYO - WES", "A TUS - ROM", "A PIE - VEN", "F MAR - LYO", "A NAF S F TUN", "F TYS S A TUS - ROM", "F TUN S F TYS"});
game.set_orders("GERMANY", {"A BOH - GAL", "F BAL - KIE", "A LVN - WAR", "A MUN - TYR", "A MOS - UKR", "A PRU S A LVN - WAR"});
game.set_orders("TURKEY", {"F SMY - EAS", "F GRE - ION", "F ION - TYS", "A APU - ROM", "F AEG S F GRE - ION", "F NAP S F ION - TYS", "A SEV S A UKR - MOS"});
game.process();

LOG(INFO) << "\nTesting state: S1905R ";
{ // state tests: S1905R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1905R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TRI", "A VEN", "F ADR", "A SIL", "A MOS", "A GAL", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F SPA/SC", "A NWY", "A STP", "A PIC", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "F TUN", "A NAF", "A TUS", "F WES", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU", "A MUN", "A WAR", "F KIE"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F NAP", "F ION", "A APU", "F EAS", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "ROM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "TUN", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "MOS", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1905R
LOG(INFO) << "\nPreparing to process: S1905R ";

// Submit orders
game.set_orders("GERMANY", {"A MOS R LVN"});
game.process();

LOG(INFO) << "\nTesting state: F1905M ";
{ // state tests: F1905M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1905M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TRI", "A VEN", "F ADR", "A SIL", "A MOS", "A GAL", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F SPA/SC", "A NWY", "A STP", "A PIC", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "F TUN", "A NAF", "A TUS", "F WES", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU", "A MUN", "A LVN", "A WAR", "F KIE"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F NAP", "F ION", "A APU", "F EAS", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "ROM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "TUN", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "MOS", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1905M
LOG(INFO) << "\nPreparing to process: F1905M ";

// Submit orders
game.set_orders("AUSTRIA", {"A GAL - WAR", "A SIL - MUN", "A BOH S A SIL - MUN", "F ADR S A VEN", "A VEN S F NAP - ROM", "A TYR S A SIL - MUN", "A MOS S A GAL - WAR", "A TRI S A TYR"});
game.set_orders("ENGLAND", {"F NTH C A NWY - BEL", "F ENG - BRE", "A NWY - BEL VIA", "F SPA/SC - MAR", "A PIC - PAR", "A STP H"});
game.set_orders("FRANCE", {"F WES C A NAF - SPA", "A TUS - PIE", "A PIE - MAR", "A NAF - SPA VIA", "F TYS S F TUN", "F LYO S A NAF - SPA", "F TUN S F TYS"});
game.set_orders("GERMANY", {"A WAR - MOS", "A PRU - WAR", "F KIE - BER", "A MUN H", "A LVN S A WAR - MOS"});
game.set_orders("TURKEY", {"F ION - NAP", "F EAS - ION", "F NAP - ROM", "A SEV S A MOS", "A APU S F NAP - ROM", "F AEG S F EAS - ION", "F GRE S F EAS - ION"});
game.process();

LOG(INFO) << "\nTesting state: F1905R ";
{ // state tests: F1905R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1905R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TRI", "A MUN", "A VEN", "F ADR", "A MOS", "A WAR", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A PAR", "F BRE", "A STP", "A BEL", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "F TUN", "A SPA", "A TUS", "F WES", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BER", "A PRU", "A LVN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F NAP", "F ION", "F ROM", "A APU", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "ROM", "TRI", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "NWY", "SWE", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "BRE", "PAR", "TUN", "POR", "BEL", "SPA"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "MOS", "MUN", "HOL", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1905R
LOG(INFO) << "\nPreparing to process: F1905R ";

// Submit orders
game.set_orders("ENGLAND", {"F SPA/SC R POR"});
game.set_orders("GERMANY", {"A WAR R UKR", "A MUN R KIE"});
game.process();

LOG(INFO) << "\nTesting state: W1905A ";
{ // state tests: W1905A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1905A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TRI", "A MUN", "A VEN", "F ADR", "A MOS", "A WAR", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F POR", "A PAR", "F BRE", "A STP", "A BEL", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "F TUN", "A SPA", "A TUS", "F WES", "A PIE", "F TYS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A PRU", "A LVN", "F BER", "A UKR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F NAP", "F ION", "F ROM", "A APU", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "TRI", "MOS", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "SPA", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1905A
LOG(INFO) << "\nPreparing to process: W1905A ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD B"});
game.set_orders("ENGLAND", {"A EDI B", "F LON B", "A LVP B"});
game.set_orders("FRANCE", {"F TYS D", "F TUN D", "F LYO D", "A TUS D"});
game.set_orders("GERMANY", {"F BER D"});
game.set_orders("TURKEY", {"F CON B"});
game.process();

LOG(INFO) << "\nTesting state: S1906M ";
{ // state tests: S1906M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1906M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TRI", "A MUN", "A VEN", "A BUD", "F ADR", "A MOS", "A WAR", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F POR", "A LVP", "F LON", "A PAR", "A EDI", "F BRE", "A STP", "A BEL", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F WES", "A PIE", "A SPA"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A PRU", "A UKR", "A LVN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F NAP", "F ION", "F ROM", "A APU", "F CON", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "TRI", "MOS", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "SPA", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1906M
LOG(INFO) << "\nPreparing to process: S1906M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD - RUM", "A BOH - GAL", "F ADR - ALB", "A VEN - PIE", "A MOS - UKR", "A TRI - SER", "A TYR - BOH", "A MUN S A TYR - BOH", "A WAR S A MOS - UKR"});
game.set_orders("ENGLAND", {"F NTH C A EDI - BEL", "A EDI - BEL VIA", "A BEL - BUR", "A LVP - WAL", "A PAR - GAS", "F LON - ENG", "F BRE - MAO", "F POR S F BRE - MAO", "A STP S A LVN - MOS"});
game.set_orders("FRANCE", {"A PIE - MAR", "F WES - MAO", "A SPA S A PIE - MAR"});
game.set_orders("GERMANY", {"A PRU - WAR", "A KIE - MUN", "A LVN - MOS", "A UKR - SEV"});
game.set_orders("TURKEY", {"F ION H", "F AEG H", "F CON H", "F NAP H", "A APU H", "A SEV H", "F GRE H", "F ROM H"});
game.process();

LOG(INFO) << "\nTesting state: F1906M ";
{ // state tests: F1906M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1906M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A MUN", "A RUM", "A SER", "F ALB", "A PIE", "A WAR", "A GAL", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F POR", "F MAO", "A BUR", "A GAS", "A WAL", "A STP", "A BEL", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F WES", "A SPA", "A MAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A PRU", "A MOS", "A UKR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F AEG", "F NAP", "F ION", "F ROM", "A APU", "F CON", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "TRI", "MOS", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "SPA", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1906M
LOG(INFO) << "\nPreparing to process: F1906M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BOH - MUN", "F ALB - GRE", "A MUN - BUR", "A PIE S A MAR", "A GAL S A WAR", "A WAR H", "A RUM S A UKR - SEV", "A SER S F ALB - GRE"});
game.set_orders("ENGLAND", {"F MAO C A WAL - SPA", "F ENG C A WAL - SPA", "A WAL - SPA VIA", "A BUR - MAR", "A BEL - HOL", "F NTH - DEN", "A GAS S A WAL - SPA", "F POR S A WAL - SPA", "A STP S A MOS"});
game.set_orders("FRANCE", {"F WES S A SPA", "A MAR S A MUN - BUR", "A SPA S A MAR"});
game.set_orders("GERMANY", {"A UKR - SEV", "A KIE - DEN", "A PRU - LVN", "A MOS S A UKR - SEV"});
game.set_orders("TURKEY", {"F CON - BUL/SC", "F NAP - TYS", "F ION - TUN", "A SEV S A SEV", "F ROM S F NAP - TYS", "A APU H", "F GRE H", "F AEG S F GRE"});
game.process();

LOG(INFO) << "\nTesting state: F1906R ";
{ // state tests: F1906R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1906R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUR", "A MUN", "A RUM", "A SER", "F ALB", "A PIE", "A WAR", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F POR", "F MAO", "A GAS", "A HOL", "A SPA", "A STP", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F WES", "A MAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A MOS", "A SEV", "A LVN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F TUN", "F AEG", "F ROM", "A APU", "F BUL/SC", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "TRI", "MOS", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "SPA", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1906R
LOG(INFO) << "\nPreparing to process: F1906R ";

// Submit orders
game.set_orders("ENGLAND", {"A BUR R PAR"});
game.set_orders("TURKEY", {"A SEV R ARM"});
game.process();

LOG(INFO) << "\nTesting state: W1906A ";
{ // state tests: W1906A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1906A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUR", "A MUN", "A RUM", "A SER", "F ALB", "A PIE", "A WAR", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F POR", "F MAO", "A GAS", "A HOL", "A PAR", "A SPA", "A STP", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F WES", "A MAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A MOS", "A SEV", "A LVN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F TUN", "F AEG", "F ROM", "A APU", "F BUL/SC", "A ARM", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "TRI", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "SEV", "MOS", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1906A
LOG(INFO) << "\nPreparing to process: W1906A ";

// Submit orders
game.set_orders("ENGLAND", {"A EDI B", "A LON B", "A LVP B"});
game.set_orders("FRANCE", {"F WES D"});
game.set_orders("GERMANY", {"F BER B"});
game.process();

LOG(INFO) << "\nTesting state: S1907M ";
{ // state tests: S1907M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1907M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUR", "A MUN", "A RUM", "A SER", "F ALB", "A PIE", "A WAR", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F POR", "F MAO", "A GAS", "A LVP", "A HOL", "A PAR", "A SPA", "A LON", "A EDI", "A STP", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A LVN", "F BER", "A MOS", "A SEV"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F TUN", "F AEG", "F ROM", "A APU", "F BUL/SC", "A ARM", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "TRI", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "SEV", "MOS", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1907M
LOG(INFO) << "\nPreparing to process: S1907M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUR - MAR", "A SER - RUM", "A RUM - UKR", "F ALB - TRI", "A GAL - BOH", "A WAR - MOS", "A MUN H", "A PIE S A BUR - MAR"});
game.set_orders("ENGLAND", {"F NTH C A EDI - NWY", "F ENG C A LON - BEL", "A LVP - EDI", "A EDI - NWY VIA", "A HOL - KIE", "A LON - BEL VIA", "A PAR - BUR", "A GAS S A PAR - BUR", "F POR H", "A STP S A WAR - MOS", "F MAO H", "A SPA S A BUR - MAR"});
game.set_orders("FRANCE", {"A MAR - GAS"});
game.set_orders("GERMANY", {"F BER - KIE", "A KIE - DEN", "A LVN - STP", "A SEV - ARM", "A MOS S A LVN - STP"});
game.set_orders("TURKEY", {"A ARM - SEV", "F TYS - ION", "F AEG - CON", "F ROM - TYS", "F TUN H", "F GRE S F BUL/SC", "A APU H", "F BUL/SC S F GRE"});
game.process();

LOG(INFO) << "\nTesting state: F1907M ";
{ // state tests: F1907M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1907M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A MUN", "F TRI", "A RUM", "A MAR", "A UKR", "A PIE", "A WAR", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F POR", "F MAO", "A BUR", "A GAS", "A HOL", "A SPA", "A NWY", "A EDI", "A STP", "A BEL", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A LVN", "A DEN", "F BER", "A MOS", "A SEV"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F TUN", "F ION", "A ARM", "A APU", "F BUL/SC", "F CON", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "TRI", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "SEV", "MOS", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1907M
LOG(INFO) << "\nPreparing to process: F1907M ";

// Submit orders
game.set_orders("AUSTRIA", {"F TRI - VEN", "A BOH - SIL", "A UKR - MOS", "A WAR S A UKR - MOS", "A MUN S A HOL - KIE", "A PIE S A MAR", "A RUM S A ARM - SEV", "A MAR H"});
game.set_orders("ENGLAND", {"F NTH - HEL", "A EDI - YOR", "F ENG - NTH", "A HOL - KIE", "A BEL - RUH", "A GAS S A BUR", "F POR H", "A NWY S A STP", "F MAO H", "A BUR S A BEL - RUH", "A SPA H", "A STP S A WAR - MOS"});
game.set_orders("GERMANY", {"F BER - KIE", "A LVN - PRU", "A SEV S A MOS", "A MOS S A SEV", "A DEN S F BER - KIE"});
game.set_orders("TURKEY", {"F ION - EAS", "F GRE - AEG", "F TYS - ION", "A ARM - SEV", "F TUN H", "F CON H", "A APU H", "F BUL/SC H"});
game.process();

LOG(INFO) << "\nTesting state: F1907R ";
{ // state tests: F1907R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1907R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F VEN", "A MUN", "A RUM", "A MAR", "A SIL", "A MOS", "A PIE", "A WAR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NTH", "F POR", "F MAO", "A BUR", "A GAS", "F HEL", "A HOL", "A YOR", "A SPA", "A NWY", "A RUH", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BER", "A PRU", "A DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F TUN", "F AEG", "F ION", "A APU", "F BUL/SC", "F EAS", "F CON", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "TRI", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "KIE", "SEV", "MOS", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1907R
LOG(INFO) << "\nPreparing to process: F1907R ";

// Submit orders
game.set_orders("GERMANY", {"A SEV R UKR", "A MOS R LVN"});
game.process();

LOG(INFO) << "\nTesting state: W1907A ";
{ // state tests: W1907A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1907A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F VEN", "A MUN", "A RUM", "A MAR", "A SIL", "A MOS", "A PIE", "A WAR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NTH", "F POR", "F MAO", "A BUR", "A GAS", "F HEL", "A HOL", "A YOR", "A SPA", "A NWY", "A RUH", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU", "A LVN", "A DEN", "F BER", "A UKR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F TUN", "F AEG", "F ION", "A APU", "F BUL/SC", "F EAS", "F CON", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"MAR", "SER", "RUM", "WAR", "TRI", "MOS", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1907A
LOG(INFO) << "\nPreparing to process: W1907A ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE B", "A TRI B"});
game.set_orders("GERMANY", {"A DEN D", "F BER D"});
game.set_orders("TURKEY", {"A ANK B"});
game.process();

LOG(INFO) << "\nTesting state: S1908M ";
{ // state tests: S1908M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1908M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F VEN", "A TRI", "A MUN", "A RUM", "A VIE", "A MAR", "A SIL", "A MOS", "A PIE", "A WAR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NTH", "F POR", "F MAO", "A BUR", "A GAS", "F HEL", "A HOL", "A YOR", "A SPA", "A NWY", "A RUH", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU", "A LVN", "A UKR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F TUN", "F AEG", "F ION", "A APU", "F BUL/SC", "A ANK", "F EAS", "F CON", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"MAR", "SER", "RUM", "WAR", "TRI", "MOS", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1908M
LOG(INFO) << "\nPreparing to process: S1908M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE - GAL", "A TRI - TYR", "A RUM - UKR", "A MOS S A RUM - UKR", "A MAR H", "A WAR S A MOS", "A MUN S A RUH - KIE", "A SIL S A WAR", "A PIE S A MAR", "F VEN H"});
game.set_orders("ENGLAND", {"F NTH C A YOR - DEN", "A NWY - STP", "A HOL - KIE", "A YOR - DEN VIA", "F POR - MAO", "A STP - MOS", "F MAO - WES", "A GAS - MAR", "F HEL - DEN", "A RUH S A HOL - KIE", "A SPA S A GAS - MAR", "A BUR S A GAS - MAR"});
game.set_orders("GERMANY", {"A PRU - WAR", "A LVN - MOS", "A UKR S A LVN - MOS"});
game.set_orders("TURKEY", {"F ION C A APU - SMY", "F EAS C A APU - SMY", "F AEG C A APU - SMY", "A APU - SMY VIA", "F TUN H", "F CON H", "A SEV S A RUM - UKR", "A ANK H", "F BUL/SC H"});
game.process();

LOG(INFO) << "\nTesting state: F1908M ";
{ // state tests: F1908M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1908M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A MUN", "A WAR", "A UKR", "A SIL", "A MOS", "A PIE", "F VEN", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NTH", "A KIE", "A BUR", "F MAO", "F HEL", "A YOR", "A SPA", "A NWY", "A MAR", "A RUH", "F WES", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU", "A LVN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F TUN", "F AEG", "F ION", "F BUL/SC", "A ANK", "F EAS", "F CON", "A SMY", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"MAR", "SER", "RUM", "WAR", "TRI", "MOS", "MUN", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"BRE", "EDI", "NWY", "POR", "PAR", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1908M
LOG(INFO) << "\nPreparing to process: F1908M ";

// Submit orders
game.set_orders("AUSTRIA", {"A WAR - LVN", "A UKR - WAR", "A MUN - BER", "A GAL - BOH", "A TYR - MUN", "A SIL S A MUN - BER", "A PIE H", "A MOS S A WAR - LVN", "F VEN H"});
game.set_orders("ENGLAND", {"F NTH C A YOR - HOL", "F WES C A SPA - NAF", "A BUR - MUN", "F MAO - SPA/SC", "A SPA - NAF VIA", "A YOR - HOL VIA", "F HEL - DEN", "A STP S A LVN - MOS", "A KIE S A BUR - MUN", "A NWY S A STP", "A MAR H", "A RUH S A BUR - MUN"});
game.set_orders("GERMANY", {"A PRU - BER", "A LVN - PRU"});
game.set_orders("TURKEY", {"F ION - TYS", "F AEG - ION", "A SEV - ARM", "F BUL/SC - AEG", "F CON H", "F TUN S F ION - TYS", "A SMY H", "A ANK H", "F EAS H"});
game.process();

LOG(INFO) << "\nTesting state: W1908A ";
{ // state tests: W1908A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1908A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A LVN", "A WAR", "A BER", "A SIL", "A MOS", "A PIE", "F VEN", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A KIE", "F DEN", "A MUN", "A HOL", "F SPA/SC", "A NWY", "A MAR", "A NAF", "A STP", "A RUH", "F WES", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A PRU"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F TUN", "F AEG", "F ION", "A ARM", "A ANK", "F EAS", "F CON", "A SMY", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "BER", "WAR", "TRI", "MOS", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"MAR", "BRE", "DEN", "EDI", "NWY", "POR", "MUN", "PAR", "KIE", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1908A
LOG(INFO) << "\nPreparing to process: W1908A ";

// Submit orders
game.set_orders("ENGLAND", {"A EDI B", "A LON B", "F LVP B"});
game.set_orders("GERMANY", {"A PRU D"});
game.process();

LOG(INFO) << "\nTesting state: S1909M ";
{ // state tests: S1909M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1909M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A LVN", "A WAR", "A BER", "A SIL", "A MOS", "A PIE", "F VEN", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A KIE", "F DEN", "A MUN", "A HOL", "F SPA/SC", "A NWY", "A LON", "A MAR", "A NAF", "A EDI", "A STP", "A RUH", "F WES", "F LVP", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F TUN", "F AEG", "F ION", "A ARM", "A ANK", "F EAS", "F CON", "A SMY", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "BER", "WAR", "TRI", "MOS", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"MAR", "BRE", "DEN", "EDI", "NWY", "POR", "MUN", "PAR", "KIE", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1909M
LOG(INFO) << "\nPreparing to process: S1909M ";

// Submit orders
game.set_orders("AUSTRIA", {"A WAR - PRU", "A PIE - MAR", "A BOH - MUN", "A MOS - STP", "A TYR S A BOH - MUN", "A LVN S A MOS - STP", "A BER S A BOH - MUN", "A SIL S A BOH - MUN", "F VEN H"});
game.set_orders("ENGLAND", {"F NTH C A EDI - DEN", "F DEN - BAL", "A RUH - BUR", "F WES - TUN", "F SPA/SC - LYO", "A EDI - DEN VIA", "A MAR - PIE", "A MUN - BER", "A HOL - RUH", "F LVP - IRI", "A NAF S F WES - TUN", "A STP H", "A KIE S A MUN - BER", "A NWY S A STP", "A LON H"});
game.set_orders("TURKEY", {"F ION C A SMY - NAP", "F AEG C A SMY - NAP", "A SMY - NAP VIA", "A ARM - SYR", "A ANK - SMY", "F CON H", "F TYS S F TUN", "F TUN S F TYS", "F EAS H"});
game.process();

LOG(INFO) << "\nTesting state: F1909M ";
{ // state tests: F1909M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1909M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A PRU", "A MUN", "A LVN", "A SIL", "A MOS", "A PIE", "F VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A KIE", "A BUR", "F LYO", "F IRI", "A DEN", "A NWY", "A LON", "A MAR", "A NAF", "A BER", "A STP", "F BAL", "A RUH", "F WES", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A NAP", "F TUN", "F AEG", "F ION", "A SYR", "F EAS", "F CON", "A SMY", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "BER", "WAR", "TRI", "MOS", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"MAR", "BRE", "DEN", "EDI", "NWY", "POR", "MUN", "PAR", "KIE", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1909M
LOG(INFO) << "\nPreparing to process: F1909M ";

// Submit orders
game.set_orders("AUSTRIA", {"F VEN - APU", "A PIE - MAR", "A SIL - BER", "A MUN S A SIL - BER", "A MOS S A LVN", "A LVN S A PRU", "A PRU S A SIL - BER", "A TYR S A MUN"});
game.set_orders("ENGLAND", {"F NTH C A LON - BEL", "A BUR - MUN", "A DEN - SWE", "F IRI - MAO", "F LYO - TYS", "A LON - BEL VIA", "F WES - TUN", "A BER S A BUR - MUN", "A KIE S A BUR - MUN", "A STP H", "A NWY S A STP", "F BAL S A BER", "A MAR H", "A RUH S A BUR - MUN", "A NAF S F WES - TUN"});
game.set_orders("TURKEY", {"F EAS C A SMY - NAP", "F ION C A SMY - NAP", "A SMY - NAP VIA", "A NAP - ROM", "F AEG H", "F CON H", "A SYR H", "F TUN S F TYS", "F TYS S F TUN"});
game.process();

LOG(INFO) << "\nTesting state: F1909R ";
{ // state tests: F1909R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1909R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A PRU", "A LVN", "F APU", "A SIL", "A MOS", "A PIE"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A KIE", "F LYO", "F TUN", "A MUN", "F MAO", "A NWY", "A MAR", "A NAF", "A BER", "A STP", "F BAL", "A SWE", "A RUH", "A BEL", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A NAP", "A ROM", "F AEG", "F ION", "A SYR", "F EAS", "F CON", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "BER", "WAR", "TRI", "MOS", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"MAR", "BRE", "DEN", "EDI", "NWY", "POR", "MUN", "PAR", "KIE", "SWE", "BEL", "LON", "STP", "LVP", "HOL", "SPA"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "TUN", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1909R
LOG(INFO) << "\nPreparing to process: F1909R ";

// Submit orders
game.set_orders("AUSTRIA", {"A MUN R BOH"});
game.process();

LOG(INFO) << "\nTesting state: COMPLETED ";
{ // state tests: COMPLETED
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "COMPLETED");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A PRU", "A LVN", "F APU", "A SIL", "A MOS", "A PIE", "A BOH"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A KIE", "F LYO", "F TUN", "A MUN", "F MAO", "A NWY", "A MAR", "A NAF", "A BER", "A STP", "F BAL", "A SWE", "A RUH", "A BEL", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A NAP", "A ROM", "F AEG", "F ION", "A SYR", "F EAS", "F CON", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "RUM", "WAR", "TRI", "MOS", "VEN", "VIE", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"MAR", "BRE", "DEN", "EDI", "NWY", "POR", "MUN", "PAR", "KIE", "SWE", "BEL", "TUN", "LON", "STP", "LVP", "HOL", "SPA", "BER"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "NAP", "ANK", "ROM", "SEV", "BUL", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: COMPLETED

} // TEST_F
} // namespace dipcc

