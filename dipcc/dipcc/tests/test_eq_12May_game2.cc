
// This file is auto-generated by render_equivalence_test.py
//
#include <algorithm>
#include <vector>
#include "../cc/game.h"
#include "../cc/hash.h"
#include "../cc/thirdparty/nlohmann/json.hpp"
#include "consts.h"
#include "utils.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"

using namespace std;
using nlohmann::json;

namespace dipcc {

class GameEquivalenceTest : public ::testing::Test {};

TEST_F(GameEquivalenceTest, Test__tmp_blah_6hgames__12May_game2_json) {

Game game;


LOG(INFO) << "\nTesting state: S1901M ";
{ // state tests: S1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A BUD", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F EDI", "A LVP", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A PAR", "F BRE", "A MAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER", "F KIE", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "F NAP", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F STP/SC", "A WAR", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A SMY", "F ANK", "A CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BER", "MUN", "KIE"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "STP", "WAR", "MOS"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "ANK", "CON"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1901M
LOG(INFO) << "\nPreparing to process: S1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD - SER", "F TRI - ALB", "A VIE - GAL"});
game.set_orders("ENGLAND", {"F EDI - NTH", "F LON - ENG", "A LVP - YOR"});
game.set_orders("FRANCE", {"A PAR - GAS", "F BRE - MAO", "A MAR - BUR"});
game.set_orders("GERMANY", {"F KIE - DEN", "A BER - KIE", "A MUN - RUH"});
game.set_orders("ITALY", {"F NAP - ION", "A ROM - VEN", "A VEN - TYR"});
game.set_orders("RUSSIA", {"A MOS - UKR", "A WAR - GAL", "F SEV - BLA", "F STP/SC - BOT"});
game.set_orders("TURKEY", {"F ANK - BLA", "A CON - BUL", "A SMY - CON"});
game.process();

LOG(INFO) << "\nTesting state: F1901M ";
{ // state tests: F1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "F ALB", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A YOR", "F NTH", "F ENG"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BUR", "A GAS", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F DEN", "A KIE"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A TYR", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SEV", "A WAR", "F BOT", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ANK", "A CON", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BER", "MUN", "KIE"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "STP", "WAR", "MOS"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "ANK", "CON"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1901M
LOG(INFO) << "\nPreparing to process: F1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE - TRI", "F ALB - GRE", "A SER S F ALB - GRE"});
game.set_orders("ENGLAND", {"A YOR - NWY VIA", "F NTH C A YOR - NWY", "F ENG - BEL"});
game.set_orders("FRANCE", {"A BUR - BEL", "A GAS - SPA", "F MAO - POR"});
game.set_orders("GERMANY", {"F DEN - SWE", "A KIE - HOL", "A RUH - MUN"});
game.set_orders("ITALY", {"A TYR S A VEN - TRI", "F ION - TUN", "A VEN - TRI"});
game.set_orders("RUSSIA", {"F BOT - SWE", "A UKR - RUM", "F SEV S A UKR - RUM", "A WAR - LVN"});
game.set_orders("TURKEY", {"F ANK - BLA", "A BUL - RUM", "A CON - BUL"});
game.process();

LOG(INFO) << "\nTesting state: W1901A ";
{ // state tests: W1901A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1901A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A SER", "F GRE"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A NWY", "F NTH", "F ENG"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BUR", "F POR", "A SPA"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A MUN", "F DEN", "A HOL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A TYR", "A TRI", "F TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SEV", "A LVN", "A RUM", "F BOT"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F BLA", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "GRE", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"NWY", "EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "TRI", "TUN", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "MOS", "SEV", "STP", "RUM"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "ANK", "CON", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1901A
LOG(INFO) << "\nPreparing to process: W1901A ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD B"});
game.set_orders("ENGLAND", {"F LON B"});
game.set_orders("FRANCE", {"F BRE B", "A PAR B"});
game.set_orders("GERMANY", {"A KIE B", "F BER B"});
game.set_orders("ITALY", {"A VEN B", "F NAP B"});
game.set_orders("RUSSIA", {"F STP/NC B"});
game.set_orders("TURKEY", {"A ANK B"});
game.process();

LOG(INFO) << "\nTesting state: S1902M ";
{ // state tests: S1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A BUD", "A SER", "F GRE"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F LON", "A NWY", "F NTH", "F ENG"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A PAR", "A SPA", "F BRE", "A BUR", "F POR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A MUN", "F BER", "A KIE", "A HOL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A TYR", "A TRI", "F TUN", "F NAP", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A RUM", "F BOT", "F STP/NC", "F SEV", "A LVN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "A ANK", "F BLA", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "GRE", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"NWY", "EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "TRI", "TUN", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "MOS", "SEV", "STP", "RUM"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "ANK", "CON", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1902M
LOG(INFO) << "\nPreparing to process: S1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"A SER S A BUL - RUM", "A BUD S A VIE", "F GRE - ALB", "A VIE S A MUN - TYR"});
game.set_orders("ENGLAND", {"F ENG - BEL", "F NTH S F ENG - BEL", "F LON - ENG", "A NWY S F DEN - SWE"});
game.set_orders("FRANCE", {"A BUR S A PAR - PIC", "A PAR - PIC", "A SPA - MAR", "F BRE S F POR - MAO", "F POR - MAO"});
game.set_orders("GERMANY", {"F DEN - SWE", "F BER - BAL", "A KIE - RUH", "A MUN S A KIE - RUH", "A HOL - BEL"});
game.set_orders("ITALY", {"F TUN S F NAP - ION", "A TYR - VIE", "F NAP - ION", "A VEN S A TRI", "A TRI S A TYR - VIE"});
game.set_orders("RUSSIA", {"A LVN - FIN VIA", "F SEV - ARM", "F STP/NC - NWY", "F BOT C A LVN - FIN", "A RUM S A SER - BUL"});
game.set_orders("TURKEY", {"A ANK - ARM", "F BLA S A ANK - ARM", "A CON S A BUL", "A BUL S F GRE"});
game.process();

LOG(INFO) << "\nTesting state: F1902M ";
{ // state tests: F1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "F ALB", "A SER", "A BUD"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BEL", "A NWY", "F NTH", "F ENG"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F BRE", "A PIC", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F BAL", "A MUN", "A HOL", "F SWE"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A TYR", "A TRI", "F TUN", "F ION", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A RUM", "F BOT", "F STP/NC", "F SEV", "A FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "A ARM", "F BLA", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "GRE", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"NWY", "EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "TRI", "TUN", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "MOS", "SEV", "STP", "RUM"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "ANK", "CON", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1902M
LOG(INFO) << "\nPreparing to process: F1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB - TRI", "A SER S F ALB - TRI", "A BUD S F ALB - TRI", "A VIE S F ALB - TRI"});
game.set_orders("ENGLAND", {"A NWY S F SWE", "F BEL H", "F NTH S F BEL", "F ENG - IRI"});
game.set_orders("FRANCE", {"F MAO - NAO", "F BRE - MAO", "A MAR S A BUR", "A BUR H", "A PIC - BRE"});
game.set_orders("GERMANY", {"F SWE S A NWY", "F BAL S F SWE", "A RUH S A HOL", "A HOL S F BEL", "A MUN - BUR"});
game.set_orders("ITALY", {"F TUN - ION", "A TYR - VIE", "F ION - AEG", "A VEN S A TRI", "A TRI S A TYR - VIE"});
game.set_orders("RUSSIA", {"F STP/NC - NWY", "A RUM S F SEV", "A FIN S F STP/NC - NWY", "F BOT - SWE", "F SEV S A RUM"});
game.set_orders("TURKEY", {"A BUL - RUM", "A CON - SEV VIA", "F BLA C A CON - SEV", "A ARM S A CON - SEV"});
game.process();

LOG(INFO) << "\nTesting state: W1902A ";
{ // state tests: W1902A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1902A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A SER", "A BUD", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BEL", "F IRI", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "A MAR", "F NAO", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F BAL", "A MUN", "A HOL", "F SWE"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A TYR", "A VEN", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A RUM", "F NWY", "F BOT", "A FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "F BLA", "A BUL", "A SEV"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"SWE", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "MOS", "NWY", "STP", "RUM"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1902A
LOG(INFO) << "\nPreparing to process: W1902A ";

// Submit orders
game.set_orders("ENGLAND", {"A LVP B"});
game.set_orders("GERMANY", {"F KIE B"});
game.set_orders("RUSSIA", {"A MOS B"});
game.set_orders("TURKEY", {"A CON B"});
game.process();

LOG(INFO) << "\nTesting state: S1903M ";
{ // state tests: S1903M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1903M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A SER", "A BUD", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BEL", "F IRI", "F NTH", "A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "A MAR", "F NAO", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F BAL", "A MUN", "F KIE", "A HOL", "F SWE"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A TYR", "A VEN", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A RUM", "F NWY", "F BOT", "A FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A BUL", "A SEV", "A CON", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"SWE", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "MOS", "NWY", "STP", "RUM"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1903M
LOG(INFO) << "\nPreparing to process: S1903M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD S F TRI", "A VIE - TYR", "A SER - GRE", "F TRI S A VEN"});
game.set_orders("ENGLAND", {"F BEL - ENG", "F NTH - BEL", "A LVP H", "F IRI - MAO"});
game.set_orders("FRANCE", {"A BRE - PIC", "A MAR S A BUR", "A BUR S A BRE - PIC", "F MAO - WES", "F NAO - MAO"});
game.set_orders("GERMANY", {"F KIE - DEN", "A RUH - BEL", "A MUN S A BUR", "A HOL S A RUH - BEL", "F SWE S F KIE - DEN", "F BAL - BOT"});
game.set_orders("ITALY", {"A TYR - BOH", "F ION - GRE", "A VEN - TYR", "F AEG S F ION - GRE"});
game.set_orders("RUSSIA", {"A RUM - UKR", "A MOS S A RUM - UKR", "A FIN - SWE", "F BOT S A FIN - SWE", "F NWY S A FIN - SWE"});
game.set_orders("TURKEY", {"A ARM S A SEV", "A BUL - RUM", "F BLA S A BUL - RUM", "A SEV S A MOS - UKR", "A CON - BUL"});
game.process();

LOG(INFO) << "\nTesting state: S1903R ";
{ // state tests: S1903R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1903R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A SER", "A BUD", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F IRI", "F ENG", "F NTH", "A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "A PIC", "F NAO", "F WES", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BAL", "A MUN", "A HOL", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F GRE", "A BOH", "A VEN", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F NWY", "F BOT", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "A BUL", "A SEV", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"SWE", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "MOS", "NWY", "STP", "RUM"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1903R
LOG(INFO) << "\nPreparing to process: S1903R ";

// Submit orders
game.set_orders("GERMANY", {"F SWE R SKA"});
game.process();

LOG(INFO) << "\nTesting state: F1903M ";
{ // state tests: F1903M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1903M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A SER", "A BUD", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F IRI", "F ENG", "F NTH", "A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "A PIC", "F NAO", "F WES", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BAL", "A MUN", "F SKA", "A HOL", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F GRE", "A BOH", "A VEN", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F NWY", "F BOT", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "A BUL", "A SEV", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"SWE", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "MOS", "NWY", "STP", "RUM"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1903M
LOG(INFO) << "\nPreparing to process: F1903M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE - TYR", "A BUD - VIE", "F TRI - VEN", "A SER S A BUL - GRE"});
game.set_orders("ENGLAND", {"F ENG - BEL", "F IRI - ENG", "A LVP - YOR", "F NTH S F ENG - BEL"});
game.set_orders("FRANCE", {"F WES - TUN", "F NAO - MAO", "A MAR - SPA", "A PIC - BRE", "A BUR - BEL"});
game.set_orders("GERMANY", {"A MUN S A BUR", "A BEL S A HOL", "A HOL S A BEL", "F DEN S F SKA - NTH", "F BAL - SWE", "F SKA - NTH"});
game.set_orders("ITALY", {"A BOH - VIE", "A VEN - TRI", "F AEG - SMY", "F GRE - BUL/SC"});
game.set_orders("RUSSIA", {"A MOS S A UKR", "A UKR S A BUD - RUM", "F NWY S A SWE", "F BOT S A SWE", "A SWE S F NTH - DEN"});
game.set_orders("TURKEY", {"A ARM - SMY", "F BLA S A SEV", "A BUL S A SER - GRE", "A RUM H", "A SEV S A RUM"});
game.process();

LOG(INFO) << "\nTesting state: F1903R ";
{ // state tests: F1903R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1903R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A SER", "A BUD", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A YOR", "F IRI", "F ENG"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "A SPA", "F TUN", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BAL", "A MUN", "F NTH", "A HOL", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F GRE", "A BOH", "A VEN", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F NWY", "F BOT", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "A BUL", "A SEV", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"SWE", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "MOS", "NWY", "STP", "RUM"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1903R
LOG(INFO) << "\nPreparing to process: F1903R ";

// Submit orders
game.set_orders("ENGLAND", {"F NTH R HEL"});
game.process();

LOG(INFO) << "\nTesting state: W1903A ";
{ // state tests: W1903A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1903A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A SER", "A BUD", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A YOR", "F HEL", "F IRI", "F ENG"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "A SPA", "F TUN", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BAL", "A MUN", "F NTH", "A HOL", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F GRE", "A BOH", "A VEN", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F NWY", "F BOT", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "A BUL", "A SEV", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "TRI", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "GRE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1903A
LOG(INFO) << "\nPreparing to process: W1903A ";

// Submit orders
game.set_orders("ENGLAND", {"F IRI D"});
game.set_orders("FRANCE", {"F MAR B"});
game.set_orders("TURKEY", {"F SMY B"});
game.process();

LOG(INFO) << "\nTesting state: S1904M ";
{ // state tests: S1904M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1904M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A SER", "A BUD", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A YOR", "F HEL", "F ENG"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "A SPA", "F TUN", "F MAR", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BAL", "A MUN", "F NTH", "A HOL", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F GRE", "A BOH", "A VEN", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F NWY", "F BOT", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "TRI", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "GRE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1904M
LOG(INFO) << "\nPreparing to process: S1904M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD S A SER", "A TYR - VEN", "F TRI S A TYR - VEN", "A SER S A BUL - GRE"});
game.set_orders("ENGLAND", {"A YOR - EDI", "F ENG - LON", "F HEL - DEN"});
game.set_orders("FRANCE", {"A SPA - GAS", "F TUN - TYS", "F MAO - WES", "A BUR H", "A BRE H", "F MAR - SPA/SC"});
game.set_orders("GERMANY", {"F BAL - SWE", "F NTH - HEL", "A HOL - KIE", "A MUN - KIE", "F DEN S F NTH - HEL", "A BEL S A BUR"});
game.set_orders("ITALY", {"A BOH - VIE", "A VEN - TRI", "F AEG - CON", "F GRE - AEG"});
game.set_orders("RUSSIA", {"A MOS S A UKR", "A UKR S A BUD - RUM", "F NWY - SKA", "F BOT - SWE", "A SWE - FIN"});
game.set_orders("TURKEY", {"F SMY - AEG", "A ARM S A SEV", "A BUL S A SER - GRE", "F BLA - CON", "A RUM - UKR", "A SEV S A RUM - UKR"});
game.process();

LOG(INFO) << "\nTesting state: S1904R ";
{ // state tests: S1904R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1904R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BUD", "F TRI", "A VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "F TYS", "A GAS", "F WES", "F SPA/SC", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BAL", "A MUN", "A HOL", "A BEL", "F DEN", "F HEL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VIE", "F GRE", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F SKA", "F BOT", "A UKR", "A FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "TRI", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "GRE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1904R
LOG(INFO) << "\nPreparing to process: S1904R ";

// Submit orders
game.set_orders("ITALY", {"A VEN R APU"});
game.process();

LOG(INFO) << "\nTesting state: F1904M ";
{ // state tests: F1904M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1904M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BUD", "F TRI", "A VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "F TYS", "A GAS", "F WES", "F SPA/SC", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BAL", "A MUN", "A HOL", "A BEL", "F DEN", "F HEL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VIE", "A APU", "F GRE", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F SKA", "F BOT", "A UKR", "A FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "TRI", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "GRE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1904M
LOG(INFO) << "\nPreparing to process: F1904M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VEN S F TYS - ROM", "A SER - GRE", "A BUD - SER", "F TRI - ALB"});
game.set_orders("ENGLAND", {"F LON - NTH", "A EDI - YOR"});
game.set_orders("FRANCE", {"A BRE - PIC", "A BUR S A BRE - PIC", "A GAS S A BUR", "F SPA/SC - MAO", "F TYS - ROM", "F WES - TUN"});
game.set_orders("GERMANY", {"A MUN - RUH", "A BEL - RUH", "A HOL - KIE", "F DEN - NTH", "F BAL - DEN", "F HEL S F DEN - NTH"});
game.set_orders("ITALY", {"A VIE H", "F AEG S F GRE", "A APU - NAP", "F GRE H"});
game.set_orders("RUSSIA", {"F BOT - SWE", "F SKA - NTH", "A FIN S F BOT - SWE", "A MOS S A UKR", "A UKR S A BUD - RUM"});
game.set_orders("TURKEY", {"F SMY - AEG", "A ARM S A SEV", "A BUL S A SER - GRE", "F BLA - CON", "A RUM - UKR", "A SEV S A RUM - UKR"});
game.process();

LOG(INFO) << "\nTesting state: F1904R ";
{ // state tests: F1904R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1904R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A GRE", "F ALB", "A SER", "A VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A YOR", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TUN", "F ROM", "A GAS", "A PIC", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A MUN", "F NTH", "A KIE", "A BEL", "F DEN", "F HEL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VIE", "A NAP", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F SKA", "F SWE", "A UKR", "A FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "TRI", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VEN", "ROM", "GRE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1904R
LOG(INFO) << "\nPreparing to process: F1904R ";

// Submit orders
game.set_orders("ITALY", {"F GRE D"});
game.process();

LOG(INFO) << "\nTesting state: W1904A ";
{ // state tests: W1904A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1904A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A GRE", "F ALB", "A SER", "A VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A YOR", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TUN", "F ROM", "A GAS", "A PIC", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A MUN", "F NTH", "A KIE", "A BEL", "F DEN", "F HEL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VIE", "A NAP", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F SKA", "F SWE", "A UKR", "A FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VIE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1904A
LOG(INFO) << "\nPreparing to process: W1904A ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD B"});
game.set_orders("ENGLAND", {"F EDI B"});
game.set_orders("FRANCE", {"F BRE B"});
game.set_orders("ITALY", {"A NAP D"});
game.process();

LOG(INFO) << "\nTesting state: S1905M ";
{ // state tests: S1905M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1905M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BUD", "A VEN", "A GRE", "F ALB"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A YOR", "F EDI", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TUN", "F ROM", "A GAS", "F BRE", "A PIC", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A MUN", "F NTH", "A KIE", "A BEL", "F DEN", "F HEL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VIE", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F SKA", "F SWE", "A UKR", "A FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VIE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1905M
LOG(INFO) << "\nPreparing to process: S1905M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB S A VEN - TRI", "A VEN - TRI", "A BUD S A SER", "A SER - GRE", "A GRE S A SER"});
game.set_orders("ENGLAND", {"F EDI - NTH", "F LON S F EDI - NTH", "A YOR H"});
game.set_orders("FRANCE", {"F ROM - NAP", "F MAO - IRI", "F BRE - ENG", "F TUN S F ALB - ION", "A GAS S A BUR", "A PIC H"});
game.set_orders("GERMANY", {"A BEL - BUR", "F HEL - HOL", "F NTH - SKA", "F DEN S F NTH - SKA", "A KIE S F DEN", "A MUN S A BEL - BUR"});
game.set_orders("ITALY", {"A VIE - TRI", "F AEG - CON"});
game.set_orders("RUSSIA", {"F SWE - BAL", "A FIN - SWE", "F SKA S A FIN - SWE", "A MOS S A UKR", "A UKR S A BUD - RUM"});
game.set_orders("TURKEY", {"A ARM S A SEV", "A SEV S A RUM", "F SMY S F AEG", "F CON S A BUL", "A RUM S A BUL", "A BUL S A RUM"});
game.process();

LOG(INFO) << "\nTesting state: S1905R ";
{ // state tests: S1905R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1905R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A SER", "A BUD", "A GRE", "F ALB"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A YOR", "F NTH", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TUN", "F IRI", "F ENG", "F NAP", "A GAS", "A PIC", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F HOL", "A MUN", "F SKA", "A KIE", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VIE", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "A UKR", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VIE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1905R
LOG(INFO) << "\nPreparing to process: S1905R ";

// Submit orders
game.set_orders("RUSSIA", {"F SKA R NWY"});
game.process();

LOG(INFO) << "\nTesting state: F1905M ";
{ // state tests: F1905M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1905M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A SER", "A BUD", "A GRE", "F ALB"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A YOR", "F NTH", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TUN", "F IRI", "F ENG", "F NAP", "A GAS", "A PIC", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F HOL", "A MUN", "F SKA", "A KIE", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VIE", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F BAL", "F NWY", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VIE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1905M
LOG(INFO) << "\nPreparing to process: F1905M ";

// Submit orders
game.set_orders("AUSTRIA", {"A TRI - VIE", "A BUD S A TRI - VIE", "A SER S A GRE", "F ALB S A GRE", "A GRE S A SER"});
game.set_orders("ENGLAND", {"A YOR - LVP", "F LON - ENG", "F NTH S F LON - ENG"});
game.set_orders("FRANCE", {"F IRI S F ENG", "F ENG C A PIC - WAL", "A GAS S A BUR", "A BUR H", "F NAP S F TUN - ION", "F TUN - ION"});
game.set_orders("GERMANY", {"F SKA - SWE", "A MUN - BUR", "F DEN S F SKA - SWE", "A KIE S F DEN", "F HOL S A BEL", "A BEL S A MUN - BUR"});
game.set_orders("ITALY", {"A VIE - TRI", "F AEG - CON"});
game.set_orders("RUSSIA", {"A UKR S A BUD - RUM", "F NWY - SKA", "A SWE S F BAL - DEN", "F BAL - DEN", "A MOS S A UKR"});
game.set_orders("TURKEY", {"A ARM S A SEV", "A SEV S A RUM", "F SMY S F AEG", "F CON S A BUL", "A RUM S A BUL", "A BUL S A RUM"});
game.process();

LOG(INFO) << "\nTesting state: F1905R ";
{ // state tests: F1905R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1905R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A SER", "A BUD", "A GRE", "F ALB"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP", "F NTH", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F IRI", "F ENG", "F NAP", "A GAS", "F ION", "A PIC", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F HOL", "A MUN", "F SKA", "A KIE", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F BAL", "F NWY", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"VIE", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1905R
LOG(INFO) << "\nPreparing to process: F1905R ";

// Submit orders
game.set_orders("ITALY", {"A VIE R BOH"});
game.process();

LOG(INFO) << "\nTesting state: W1905A ";
{ // state tests: W1905A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1905A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A SER", "A BUD", "A GRE", "F ALB"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP", "F NTH", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F IRI", "F ENG", "F NAP", "A GAS", "F ION", "A PIC", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F HOL", "A MUN", "F SKA", "A KIE", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A BOH", "F AEG"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F BAL", "F NWY", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "NAP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1905A
LOG(INFO) << "\nPreparing to process: W1905A ";

// Submit orders
game.set_orders("AUSTRIA", {"F TRI B"});
game.set_orders("FRANCE", {"F BRE B"});
game.set_orders("ITALY", {"A BOH D", "F AEG D"});
game.process();

LOG(INFO) << "\nTesting state: S1906M ";
{ // state tests: S1906M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1906M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A SER", "A BUD", "A GRE", "F ALB", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP", "F NTH", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F IRI", "F ENG", "F NAP", "A GAS", "F ION", "F BRE", "A PIC", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F HOL", "A MUN", "F SKA", "A KIE", "A BEL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F BAL", "F NWY", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "F SMY", "A BUL", "A SEV", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "NAP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1906M
LOG(INFO) << "\nPreparing to process: S1906M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB S F TRI - ADR", "F TRI - ADR", "A VIE - GAL", "A BUD S A VIE - GAL", "A GRE S A SER", "A SER S A GRE"});
game.set_orders("ENGLAND", {"F LON - ENG", "F NTH S F LON - ENG", "A LVP H"});
game.set_orders("FRANCE", {"A GAS S A BUR", "F BRE - ENG", "F ENG - IRI", "F ION - EAS", "F IRI - NAO", "F NAP - TYS"});
game.set_orders("GERMANY", {"A KIE - BER", "A BEL - RUH", "F HOL - BEL", "F DEN - KIE", "F SKA - DEN", "A MUN S A BEL - RUH"});
game.set_orders("RUSSIA", {"A UKR S A BUD - RUM", "A MOS S A UKR", "A SWE - BER VIA", "F BAL C A SWE - BER", "F NWY - SWE"});
game.set_orders("TURKEY", {"A RUM - GAL", "A BUL - RUM", "A SEV S A BUL - RUM", "A ARM S A SEV", "F CON - BUL/SC", "F SMY - AEG"});
game.process();

LOG(INFO) << "\nTesting state: F1906M ";
{ // state tests: F1906M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1906M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BUD", "A GRE", "F ALB", "A GAL", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F NTH", "A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F EAS", "F IRI", "A GAS", "F BRE", "A PIC", "F NAO", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A RUH", "F SKA", "A MUN", "A KIE", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F BAL", "F NWY", "A UKR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A RUM", "A BUL", "A SEV", "F CON", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "NAP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1906M
LOG(INFO) << "\nPreparing to process: F1906M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ADR S F ALB - ION", "F ALB - ION", "A GAL S A RUM - UKR", "A BUD S A SER", "A GRE S A SER", "A SER S A GRE"});
game.set_orders("ENGLAND", {"F NTH - HOL", "F ENG - IRI", "A LVP H"});
game.set_orders("FRANCE", {"F IRI - LVP", "F BRE - MAO", "A PIC - BRE", "F NAO S F IRI - LVP", "A GAS S A BUR", "F EAS H", "F TYS S F ADR - ION"});
game.set_orders("GERMANY", {"F SKA - SWE", "A MUN - BER", "F DEN S F SKA - SWE", "A KIE S F DEN", "A RUH S F BEL", "F BEL H"});
game.set_orders("RUSSIA", {"A UKR S A GAL - RUM", "A MOS S A UKR", "F BAL - DEN", "F NWY - SKA", "A SWE S F BAL - DEN"});
game.set_orders("TURKEY", {"A ARM S A SEV", "F CON S A BUL", "F AEG - SMY", "A RUM - UKR", "A SEV S A RUM - UKR", "A BUL H"});
game.process();

LOG(INFO) << "\nTesting state: F1906R ";
{ // state tests: F1906R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1906R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F ION", "A SER", "A BUD", "A GRE", "A GAL", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F HOL", "F IRI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "F TYS", "F EAS", "F LVP", "A GAS", "F NAO", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A RUH", "F SKA", "A KIE", "A BER", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F NWY", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "F SMY", "A BUL", "A SEV", "F CON", "A UKR"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "NAP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1906R
LOG(INFO) << "\nPreparing to process: F1906R ";

// Submit orders
game.set_orders("ENGLAND", {"A LVP R EDI"});
game.set_orders("RUSSIA", {"A UKR R WAR"});
game.process();

LOG(INFO) << "\nTesting state: W1906A ";
{ // state tests: W1906A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1906A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F ION", "A SER", "A BUD", "A GRE", "A GAL", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F HOL", "F IRI", "A EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "F TYS", "F EAS", "F LVP", "A GAS", "F NAO", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A RUH", "F SKA", "A KIE", "A BER", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F BAL", "A WAR", "F NWY"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "F SMY", "A BUL", "A SEV", "F CON", "A UKR"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"HOL", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "LVP", "NAP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1906A
LOG(INFO) << "\nPreparing to process: W1906A ";

// Submit orders
game.set_orders("FRANCE", {"F MAR B"});
game.set_orders("GERMANY", {"F SKA D"});
game.process();

LOG(INFO) << "\nTesting state: S1907M ";
{ // state tests: S1907M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1907M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F ION", "A SER", "A BUD", "A GRE", "A GAL", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F HOL", "F IRI", "A EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BRE", "F TYS", "F EAS", "F LVP", "A GAS", "F MAR", "F NAO", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A RUH", "A KIE", "A BER", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A SWE", "F BAL", "A WAR", "F NWY"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "F SMY", "A BUL", "A SEV", "F CON", "A UKR"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"HOL", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "LVP", "NAP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1907M
LOG(INFO) << "\nPreparing to process: S1907M ";

// Submit orders
game.set_orders("AUSTRIA", {"A GRE - APU VIA", "F ION C A GRE - APU", "A BUD - TRI", "A GAL - WAR", "A SER - GRE", "F ADR S F ION"});
game.set_orders("ENGLAND", {"A EDI S F IRI - LVP", "F HOL - NTH", "F IRI H"});
game.set_orders("FRANCE", {"A BUR - PIC", "A GAS - BUR", "A BRE - CLY VIA", "F NAO C A BRE - CLY", "F MAO C A BRE - CLY", "F LVP - WAL", "F EAS S F ION - AEG", "F TYS - ION", "F MAR - LYO"});
game.set_orders("GERMANY", {"A KIE - HOL", "A RUH - MUN", "F DEN - KIE", "A BER S F DEN - KIE", "F BEL S A KIE - HOL"});
game.set_orders("RUSSIA", {"A WAR S A MOS", "F NWY - NTH", "A SWE - DEN", "F BAL S A SWE - DEN"});
game.set_orders("TURKEY", {"F CON - BLA", "A SEV S A UKR", "A UKR S A GAL - WAR", "F SMY - CON", "A ARM - SMY", "A BUL S A GRE"});
game.process();

LOG(INFO) << "\nTesting state: S1907R ";
{ // state tests: S1907R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1907R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A APU", "A WAR", "F ION", "A GRE", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI", "F IRI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F WAL", "F EAS", "F LYO", "A PIC", "F NAO", "A CLY", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A DEN", "F NWY", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A SEV", "A SMY", "F CON", "F BLA", "A UKR"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"HOL", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "LVP", "NAP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1907R
LOG(INFO) << "\nPreparing to process: S1907R ";

// Submit orders
game.set_orders("ENGLAND", {"F HOL R HEL"});
game.set_orders("RUSSIA", {"A WAR R PRU"});
game.process();

LOG(INFO) << "\nTesting state: F1907M ";
{ // state tests: F1907M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1907M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A APU", "A WAR", "F ION", "A GRE", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI", "F IRI", "F HEL"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F WAL", "F EAS", "F LYO", "A PIC", "F NAO", "A CLY", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F BAL", "A DEN", "F NWY", "A PRU"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A SEV", "A SMY", "F CON", "F BLA", "A UKR"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VEN", "BUD", "SER", "TRI", "GRE", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"HOL", "EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "PAR", "MAR", "ROM", "TUN", "POR", "LVP", "NAP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "DEN", "BER", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "WAR", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1907M
LOG(INFO) << "\nPreparing to process: F1907M ";

// Submit orders
game.set_orders("AUSTRIA", {"A GRE - NAP VIA", "F ION C A GRE - NAP", "A APU S A GRE - NAP", "A WAR S A UKR - MOS", "A TRI - VEN", "F ADR S F ION"});
game.set_orders("ENGLAND", {"F IRI - LVP", "A EDI S F IRI - LVP", "F HEL - NTH"});
game.set_orders("FRANCE", {"F EAS - ION", "F TYS - TUN", "F LYO - TYS", "F WAL - LON", "A CLY - LVP", "A PIC - BEL", "F NAO S A CLY - LVP"});
game.set_orders("GERMANY", {"A MUN S A BER", "A BER S F KIE", "F KIE S A BER", "A HOL S F KIE", "F BEL S A HOL"});
game.set_orders("RUSSIA", {"F NWY - NTH", "A MOS - WAR", "A PRU S A MOS - WAR", "F BAL S A DEN - KIE", "A DEN - KIE"});
game.set_orders("TURKEY", {"A UKR S A WAR", "A SEV - MOS", "A BUL - RUM", "F BLA H", "F CON H", "A SMY H"});
game.process();

LOG(INFO) << "\nTesting state: W1907A ";
{ // state tests: W1907A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1907A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A NAP", "A APU", "A WAR", "F ION", "A VEN", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI", "F IRI", "F HEL"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F EAS", "F TUN", "F LON", "A PIC", "F NAO", "A CLY", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F BAL", "A DEN", "F NWY", "A PRU"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A RUM", "A SEV", "A SMY", "A UKR", "F CON", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "ROM", "TUN", "POR", "LVP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1907A
LOG(INFO) << "\nPreparing to process: W1907A ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD B", "F TRI B"});
game.set_orders("ENGLAND", {"F HEL D", "F IRI D"});
game.process();

LOG(INFO) << "\nTesting state: S1908M ";
{ // state tests: S1908M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1908M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A NAP", "A APU", "A WAR", "F ION", "A VEN", "A BUD", "F TRI", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F EAS", "F TUN", "F LON", "A PIC", "F NAO", "A CLY", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F BAL", "A DEN", "F NWY", "A PRU"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A RUM", "A SEV", "A SMY", "A UKR", "F CON", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "ROM", "TUN", "POR", "LVP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1908M
LOG(INFO) << "\nPreparing to process: S1908M ";

// Submit orders
game.set_orders("AUSTRIA", {"A WAR S A SEV - MOS", "A APU - ROM", "A VEN S A APU - ROM", "F ADR S F ION", "F TRI - ALB", "A NAP S A APU - ROM"});
game.set_orders("ENGLAND", {"A EDI - LVP"});
game.set_orders("FRANCE", {"F EAS - ION", "F TYS S F EAS - ION", "F TUN S F EAS - ION", "A CLY - LVP", "F MAO - WES", "A PIC - BEL", "F NAO - NWG"});
game.set_orders("GERMANY", {"A MUN S A BER", "A BER S F KIE", "F KIE S A BER", "A HOL S F KIE", "F BEL H"});
game.set_orders("RUSSIA", {"F NWY - NTH", "A PRU - WAR", "A MOS - UKR", "A DEN - KIE", "F BAL S A DEN - KIE"});
game.set_orders("TURKEY", {"A UKR - MOS", "A SEV S A UKR - MOS", "F CON - AEG", "A SMY H", "A RUM - UKR", "F BLA S A SEV"});
game.process();

LOG(INFO) << "\nTesting state: S1908R ";
{ // state tests: S1908R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1908R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A NAP", "A WAR", "A ROM", "A BUD", "A VEN", "F ALB", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F TUN", "F LON", "F NWG", "F ION", "A PIC", "A CLY", "F WES", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A DEN", "F NTH", "A PRU", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A SMY", "A UKR", "F BLA", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "ROM", "TUN", "POR", "LVP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1908R
LOG(INFO) << "\nPreparing to process: S1908R ";

// Submit orders
game.set_orders("AUSTRIA", {"F ION R GRE"});
game.set_orders("RUSSIA", {"A MOS R STP"});
game.process();

LOG(INFO) << "\nTesting state: F1908M ";
{ // state tests: F1908M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1908M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A NAP", "A WAR", "A ROM", "A BUD", "A VEN", "F ALB", "F GRE", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F TUN", "F LON", "F NWG", "F ION", "A PIC", "A CLY", "F WES", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BAL", "A DEN", "F NTH", "A STP", "A PRU"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A SMY", "A UKR", "F BLA", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "ROM", "TUN", "POR", "LVP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN", "MOS", "NWY", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1908M
LOG(INFO) << "\nPreparing to process: F1908M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VEN - PIE", "A ROM S A NAP", "A NAP S A ROM", "A BUD - VIE", "F ALB S F AEG - ION", "F GRE S F AEG - ION", "F ADR S F AEG - ION"});
game.set_orders("ENGLAND", {"A EDI - LVP"});
game.set_orders("FRANCE", {"A CLY - LVP", "F NWG - NWY", "F LON - ENG", "F TYS - TUS", "F WES - LYO", "F ION - TYS", "A BUR - MAR", "A PIC - BUR"});
game.set_orders("GERMANY", {"A MUN S F KIE", "A BER S F KIE", "A HOL S F BEL", "F BEL H", "F KIE S A BER"});
game.set_orders("RUSSIA", {"A PRU - KIE VIA", "F NTH - HOL", "A DEN S A PRU - KIE", "F BAL C A PRU - KIE"});
game.set_orders("TURKEY", {"A MOS - LVN", "A UKR - MOS", "A SEV S A UKR - MOS", "A SMY H", "F AEG S F GRE - ION", "F BLA H"});
game.process();

LOG(INFO) << "\nTesting state: W1908A ";
{ // state tests: W1908A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1908A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A NAP", "A PIE", "A WAR", "A ROM", "F ALB", "F GRE", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F TUN", "F ENG", "F LYO", "A MAR", "F NWY", "A CLY", "A BUR", "F TUS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BAL", "A DEN", "F NTH", "A STP", "A PRU"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A SMY", "A LVN", "F BLA", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "POR", "LVP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"STP", "SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1908A
LOG(INFO) << "\nPreparing to process: W1908A ";

// Submit orders
game.set_orders("AUSTRIA", {"A TRI B"});
game.set_orders("RUSSIA", {"A STP D"});
game.set_orders("TURKEY", {"A ANK B"});
game.process();

LOG(INFO) << "\nTesting state: S1909M ";
{ // state tests: S1909M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1909M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A TRI", "A NAP", "A PIE", "A WAR", "A ROM", "F ALB", "F GRE", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F TUN", "F ENG", "F LYO", "A MAR", "F NWY", "A CLY", "A BUR", "F TUS"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F NTH", "A PRU", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A SMY", "A LVN", "A ANK", "F BLA", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "POR", "LVP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"STP", "SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1909M
LOG(INFO) << "\nPreparing to process: S1909M ";

// Submit orders
game.set_orders("AUSTRIA", {"F GRE - ION", "F ALB S F GRE - ION", "F ADR S F GRE - ION", "A NAP S A ROM", "A VIE - TYR", "A TRI S A VIE - TYR", "A ROM S A PIE - TUS", "A PIE - TUS", "A WAR H"});
game.set_orders("ENGLAND", {"A EDI - LVP"});
game.set_orders("FRANCE", {"A CLY - LVP", "F NWY - NTH", "F ENG S F NWY - NTH", "A MAR - PIE", "F TUS - TYS", "F TYS - WES"});
game.set_orders("GERMANY", {"A MUN S A BER", "A HOL S F BEL", "A BER H", "F BEL H", "F KIE - DEN"});
game.set_orders("RUSSIA", {"A PRU - DEN VIA", "F BAL C A PRU - DEN", "F NTH S A PRU - DEN"});
game.set_orders("TURKEY", {"A ANK - SEV VIA", "A LVN - STP", "A MOS S A LVN - STP", "A SEV - UKR", "A SMY - CON", "F AEG S F GRE - ION", "F BLA C A ANK - SEV"});
game.process();

LOG(INFO) << "\nTesting state: S1909R ";
{ // state tests: S1909R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1909R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TRI", "A NAP", "A TUS", "A WAR", "A ROM", "F ION", "F ALB", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F TUN", "F ENG", "A PIE", "F NTH", "A CLY", "F WES", "A BUR", "F LYO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A PRU", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A STP", "A SEV", "A CON", "A UKR", "F BLA", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "POR", "LVP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"STP", "SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1909R
LOG(INFO) << "\nPreparing to process: S1909R ";

// Submit orders
game.set_orders("RUSSIA", {"F NTH R HEL"});
game.process();

LOG(INFO) << "\nTesting state: F1909M ";
{ // state tests: F1909M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1909M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TRI", "A NAP", "A TUS", "A WAR", "A ROM", "F ION", "F ALB", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F TUN", "F ENG", "A PIE", "F NTH", "A CLY", "F WES", "A BUR", "F LYO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F HEL", "A PRU", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A STP", "A SEV", "A CON", "A UKR", "F BLA", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "POR", "LVP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"STP", "SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1909M
LOG(INFO) << "\nPreparing to process: F1909M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB - GRE", "A TRI - VEN", "F ADR - ION", "A TYR - PIE", "A ROM S A TUS", "A NAP S A ROM", "A TUS S A TYR - PIE"});
game.set_orders("ENGLAND", {"A EDI - LVP"});
game.set_orders("FRANCE", {"F NTH - NWY", "F ENG - NTH", "A CLY - EDI", "F TYS - TUS", "F WES - TYS", "F LYO S F TYS - TUS", "F TUN S F WES - TYS", "A PIE S F TYS - TUS"});
game.set_orders("GERMANY", {"A BER S F KIE", "A HOL S F KIE", "A MUN S A BER", "F BEL S A HOL", "F KIE S A BER"});
game.set_orders("RUSSIA", {"A PRU - KIE VIA", "F BAL C A PRU - KIE", "F HEL S A PRU - KIE"});
game.set_orders("TURKEY", {"A STP - FIN", "A MOS - STP", "A UKR - MOS", "A SEV S A UKR - MOS", "F AEG S F ION", "A CON H", "F BLA H"});
game.process();

LOG(INFO) << "\nTesting state: W1909A ";
{ // state tests: W1909A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1909A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A NAP", "A TUS", "A WAR", "A ROM", "F ION", "A VEN", "F GRE", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "A EDI", "F TUN", "A PIE", "F NTH", "F NWY", "F WES", "A BUR", "F LYO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F HEL", "A PRU", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A CON", "A STP", "F BLA", "F AEG", "A FIN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "EDI", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "STP", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1909A
LOG(INFO) << "\nPreparing to process: W1909A ";

// Submit orders
game.set_orders("RUSSIA", {"A PRU D"});
game.set_orders("TURKEY", {"A ANK B"});
game.process();

LOG(INFO) << "\nTesting state: S1910M ";
{ // state tests: S1910M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1910M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A NAP", "A TUS", "A WAR", "A ROM", "F ION", "A VEN", "F GRE", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "A EDI", "F TUN", "A PIE", "F NTH", "F NWY", "F WES", "A BUR", "F LYO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F HEL", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A CON", "A STP", "A ANK", "F BLA", "F AEG", "A FIN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "EDI", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "STP", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1910M
LOG(INFO) << "\nPreparing to process: S1910M ";

// Submit orders
game.set_orders("AUSTRIA", {"A TUS - PIE", "A ROM S F ION - NAP", "A NAP - APU", "A TYR S A TUS - PIE", "A VEN S A TUS - PIE", "F ADR - ION", "F ION - NAP", "F GRE S F ADR - ION"});
game.set_orders("ENGLAND", {"A LVP - EDI"});
game.set_orders("FRANCE", {"A EDI - LVP", "F NTH S F NWY", "F LYO S A PIE", "F WES - MAO", "F TYS - ION", "F TUN S F TYS - ION"});
game.set_orders("GERMANY", {"A MUN S A BER", "A BER S F KIE", "A HOL S F BEL", "F BEL S A HOL", "F KIE S F NTH - DEN"});
game.set_orders("RUSSIA", {"F HEL - DEN", "F BAL - SWE"});
game.set_orders("TURKEY", {"A FIN - SWE", "A STP - FIN", "A MOS - STP", "A SEV - MOS", "A ANK - SEV VIA", "F BLA C A ANK - SEV", "F AEG S F ION", "A CON H"});
game.process();

LOG(INFO) << "\nTesting state: S1910R ";
{ // state tests: S1910R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1910R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A PIE", "A APU", "A WAR", "F NAP", "A ROM", "A VEN", "F GRE", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "A EDI", "F TUN", "F NTH", "F NWY", "A BUR", "F LYO", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F DEN", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A CON", "A STP", "A ANK", "F BLA", "F AEG", "A FIN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "EDI", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "STP", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1910R
LOG(INFO) << "\nPreparing to process: S1910R ";

// Submit orders
game.set_orders("FRANCE", {"A PIE R MAR"});
game.process();

LOG(INFO) << "\nTesting state: F1910M ";
{ // state tests: F1910M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1910M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A PIE", "A APU", "A WAR", "F NAP", "A ROM", "A VEN", "F GRE", "F ADR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "A EDI", "F TUN", "A MAR", "F NTH", "F NWY", "A BUR", "F LYO", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F DEN", "F BAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A CON", "A STP", "A ANK", "F BLA", "F AEG", "A FIN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "EDI", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "STP", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1910M
LOG(INFO) << "\nPreparing to process: F1910M ";

// Submit orders
game.set_orders("AUSTRIA", {"F NAP S F ADR - ION", "F GRE S F ADR - ION", "F ADR - ION", "A VEN S A PIE", "A WAR - SIL"});
game.set_orders("ENGLAND", {"A LVP - EDI"});
game.set_orders("FRANCE", {"A BUR H", "A EDI - LVP", "A MAR - PIE", "F LYO S A MAR - PIE", "F MAO - IRI", "F NTH S F NWY", "F TUN - ION", "F TYS S F TUN - ION"});
game.set_orders("GERMANY", {"A MUN S F KIE", "A BER S F KIE", "F KIE S F NTH - DEN", "A HOL S F BEL", "F BEL S A HOL"});
game.set_orders("RUSSIA", {"F BAL - SWE", "F DEN S F BAL - SWE"});
game.set_orders("TURKEY", {"F AEG S F GRE - ION", "A STP - NWY", "A FIN S A STP - NWY", "A MOS - STP", "A SEV - MOS", "A CON H", "A ANK - SEV VIA", "F BLA C A ANK - SEV"});
game.process();

LOG(INFO) << "\nTesting state: S1911M ";
{ // state tests: S1911M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1911M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A PIE", "A APU", "F NAP", "A ROM", "F ION", "A VEN", "F GRE", "A SIL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "A EDI", "F TUN", "F IRI", "A MAR", "F NTH", "F NWY", "A BUR", "F LYO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BEL", "A MUN", "F KIE", "A HOL", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SWE", "F DEN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A CON", "A STP", "A ANK", "F BLA", "F AEG", "A FIN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "EDI", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "STP", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1911M
LOG(INFO) << "\nPreparing to process: S1911M ";

// Submit orders
game.set_orders("AUSTRIA", {"A SIL - PRU", "A TYR - BOH", "A VEN - TYR", "A APU S F NAP - ROM", "F NAP - ROM", "A ROM - TUS", "F ION - NAP", "F GRE - ION", "A PIE S A ROM - TUS"});
game.set_orders("ENGLAND", {"A LVP - YOR"});
game.set_orders("FRANCE", {"F TUN S F TYS", "F LYO S A MAR - PIE", "A MAR - PIE", "F NTH S F NWY", "A EDI - YOR", "F IRI - LVP", "A BUR S A MUN", "F TYS H"});
game.set_orders("GERMANY", {"A BER S A MUN", "A MUN S A BER", "F KIE - DEN", "F BEL - HOL", "A HOL - RUH"});
game.set_orders("RUSSIA", {"F DEN - SKA", "F SWE - SKA"});
game.set_orders("TURKEY", {"A ANK - SEV VIA", "A CON H", "A FIN S A STP", "A MOS - LVN", "A SEV - MOS", "A STP S A FIN", "F AEG S F GRE - ION", "F BLA C A ANK - SEV"});
game.process();

LOG(INFO) << "\nTesting state: S1911R ";
{ // state tests: S1911R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1911R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TUS", "A APU", "F NAP", "F ROM", "F ION", "A BOH", "A PRU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "A EDI", "F TUN", "F IRI", "A PIE", "F NTH", "F NWY", "A BUR", "F LYO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F HOL", "A RUH", "A MUN", "F KIE", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SWE", "F DEN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A CON", "A STP", "A LVN", "F BLA", "F AEG", "A FIN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "EDI", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "STP", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1911R
LOG(INFO) << "\nPreparing to process: S1911R ";

// Submit orders
game.set_orders("AUSTRIA", {"A PIE R VEN"});
game.process();

LOG(INFO) << "\nTesting state: F1911M ";
{ // state tests: F1911M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1911M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A TUS", "A APU", "F NAP", "F ROM", "F ION", "A BOH", "A VEN", "A PRU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "A EDI", "F TUN", "F IRI", "A PIE", "F NTH", "F NWY", "A BUR", "F LYO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F HOL", "A RUH", "A MUN", "F KIE", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SWE", "F DEN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A CON", "A STP", "A LVN", "F BLA", "F AEG", "A FIN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "EDI", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "STP", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1911M
LOG(INFO) << "\nPreparing to process: F1911M ";

// Submit orders
game.set_orders("AUSTRIA", {"A TYR - MUN", "A PRU - BER", "A TUS S A VEN - PIE", "F ION S F NAP - TYS", "F NAP - TYS", "F ROM S A TUS", "A BOH S A TYR - MUN", "A VEN - PIE"});
game.set_orders("ENGLAND", {"A LVP - EDI"});
game.set_orders("FRANCE", {"F NTH S F NWY", "F IRI S A EDI - LVP", "A EDI - LVP", "F NWY H", "A BUR S A RUH - MUN", "F LYO S F TYS", "F TUN S F TYS", "A PIE - TUS"});
game.set_orders("GERMANY", {"A MUN H", "A BER S A MUN", "A RUH S A MUN", "F KIE - BAL", "F HOL - KIE"});
game.set_orders("RUSSIA", {"F DEN S F SWE"});
game.set_orders("TURKEY", {"A STP S A FIN", "A FIN S F SWE - NWY", "F AEG S F ION", "A CON H", "A LVN - PRU", "A MOS H", "A SEV H", "F BLA H"});
game.process();

LOG(INFO) << "\nTesting state: F1911R ";
{ // state tests: F1911R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1911R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A PIE", "A TUS", "A APU", "F NAP", "F ROM", "F ION", "A BOH", "A PRU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F TUN", "F IRI", "F NTH", "F NWY", "A LVP", "A BUR", "F LYO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F BAL", "A MUN", "F KIE", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SWE", "F DEN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A CON", "A STP", "A LVN", "F BLA", "F AEG", "A FIN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "EDI", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "STP", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1911R
LOG(INFO) << "\nPreparing to process: F1911R ";

// Submit orders
game.set_orders("ENGLAND", {"A LVP D"});
game.set_orders("FRANCE", {"A PIE D"});
game.process();

LOG(INFO) << "\nTesting state: W1911A ";
{ // state tests: W1911A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1911A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TYR", "A PIE", "A TUS", "A APU", "F NAP", "F ROM", "F ION", "A BOH", "A PRU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TYS", "F TUN", "F IRI", "F NTH", "F NWY", "A LVP", "A BUR", "F LYO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F BAL", "A MUN", "F KIE", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SWE", "F DEN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A MOS", "A SEV", "A CON", "A STP", "A LVN", "F BLA", "F AEG", "A FIN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"WAR", "VEN", "BUD", "SER", "ROM", "TRI", "GRE", "VIE", "NAP"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"LON", "SPA", "PAR", "MAR", "NWY", "TUN", "EDI", "POR", "LVP", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BEL", "BER", "HOL", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SWE", "DEN"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "BUL", "MOS", "SEV", "ANK", "STP", "CON", "RUM"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1911A
LOG(INFO) << "\nPreparing to process: W1911A ";

// Submit orders
game.set_orders("FRANCE", {"F MAR B", "F BRE B"});
game.process();


} // TEST_F
} // namespace dipcc

