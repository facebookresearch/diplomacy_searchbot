
// This file is auto-generated by render_equivalence_test.py
//
#include <algorithm>
#include <vector>
#include "../cc/game.h"
#include "../cc/hash.h"
#include "../cc/thirdparty/nlohmann/json.hpp"
#include "consts.h"
#include "utils.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"

using namespace std;
using nlohmann::json;

namespace dipcc {

class GameEquivalenceTest : public ::testing::Test {};

TEST_F(GameEquivalenceTest, Test__checkpoint_jsgray_diplomacy_mila_dataset_data__game_63344_json) {

Game game;


LOG(INFO) << "\nTesting state: S1901M ";
{ // state tests: S1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "F TRI", "A BUD"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP", "F EDI", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A PAR", "A MAR", "F BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F KIE", "A MUN", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A VEN", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F STP/SC", "F SEV", "A WAR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ANK", "A SMY", "A CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "BRE", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BER", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "STP", "SEV", "MOS"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"ANK", "CON", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1901M
LOG(INFO) << "\nPreparing to process: S1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE - TRI", "F TRI - ALB", "A BUD - SER"});
game.set_orders("ENGLAND", {"F EDI - NTH", "A LVP - YOR", "F LON - ENG"});
game.set_orders("FRANCE", {"F BRE - MAO", "A PAR - PIC", "A MAR - BUR"});
game.set_orders("GERMANY", {"F KIE - HOL", "A BER - KIE", "A MUN - RUH"});
game.set_orders("ITALY", {"F NAP - ION", "A ROM - VEN", "A VEN - TYR"});
game.set_orders("RUSSIA", {"F SEV - BLA", "A WAR - SIL", "A MOS - STP", "F STP/SC - FIN"});
game.set_orders("TURKEY", {"A CON - BUL", "A SMY - ARM", "F ANK - BLA"});
game.process();

LOG(INFO) << "\nTesting state: F1901M ";
{ // state tests: F1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "F ALB", "A TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "A YOR", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BUR", "F MAO", "A PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A RUH", "F HOL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VEN", "A TYR", "F ION"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A SIL", "A STP", "F SEV", "F FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ANK", "A BUL", "A ARM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "BRE", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BER", "KIE", "MUN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "STP", "SEV", "MOS"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"ANK", "CON", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1901M
LOG(INFO) << "\nPreparing to process: F1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB - TRI", "A SER S F ALB - TRI", "A TRI - VIE"});
game.set_orders("ENGLAND", {"A YOR - LON", "F NTH - NWY", "F ENG - BRE"});
game.set_orders("FRANCE", {"A PIC S A BUR - BEL", "A BUR - BEL", "F MAO - POR"});
game.set_orders("GERMANY", {"A KIE - DEN", "A RUH - BEL", "F HOL S A RUH - BEL"});
game.set_orders("ITALY", {"A VEN - TRI", "F ION - TUN", "A TYR - MUN"});
game.set_orders("RUSSIA", {"F SEV H", "A STP - NWY", "F FIN - SWE", "A SIL - BER"});
game.set_orders("TURKEY", {"A BUL H", "F ANK - BLA", "A ARM - SEV"});
game.process();

LOG(INFO) << "\nTesting state: W1901A ";
{ // state tests: W1901A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1901A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A VIE", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LON", "F BRE", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BUR", "F POR", "A PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F HOL", "A DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A MUN", "F TUN", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A STP", "F SEV", "A BER", "F SWE"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F BLA", "A ARM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "SER", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON", "BRE", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN", "HOL"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "MUN", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SWE", "WAR", "MOS", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"ANK", "BUL", "CON", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1901A
LOG(INFO) << "\nPreparing to process: W1901A ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD B"});
game.set_orders("ENGLAND", {"F EDI B"});
game.set_orders("ITALY", {"F NAP B", "A ROM B"});
game.set_orders("RUSSIA", {"A WAR B", "A MOS B"});
game.set_orders("TURKEY", {"F CON B"});
game.process();

LOG(INFO) << "\nTesting state: S1902M ";
{ // state tests: S1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A VIE", "F TRI", "A BUD"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F EDI", "A LON", "F BRE", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BUR", "F POR", "A PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F HOL", "A DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "F NAP", "A MUN", "F TUN", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A WAR", "F SWE", "A STP", "A BER", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F BLA", "A ARM", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "SER", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON", "BRE", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN", "HOL"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "MUN", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SWE", "WAR", "MOS", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"ANK", "BUL", "CON", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1902M
LOG(INFO) << "\nPreparing to process: S1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"A SER S A BUD - RUM", "A VIE - GAL", "F TRI - ALB", "A BUD - RUM"});
game.set_orders("ENGLAND", {"F EDI - NTH", "A LON H", "F BRE - MAO", "F NTH - ENG"});
game.set_orders("FRANCE", {"F POR - MAO", "A PIC - BRE", "A BUR - GAS"});
game.set_orders("GERMANY", {"A DEN - KIE", "A RUH S A DEN - KIE", "F HOL - HEL"});
game.set_orders("ITALY", {"F TUN - WES", "F NAP - ION", "A ROM - VEN", "A VEN - TYR", "A MUN S A VEN - TYR"});
game.set_orders("RUSSIA", {"F SEV H", "A WAR - SIL", "A MOS - UKR", "A STP - NWY", "F SWE - SKA", "A BER - KIE"});
game.set_orders("TURKEY", {"A BUL S A ARM - RUM", "F CON - AEG", "A ARM - RUM VIA", "F BLA C A ARM - RUM"});
game.process();

LOG(INFO) << "\nTesting state: F1902M ";
{ // state tests: F1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "F ALB", "A GAL", "A BUD"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "A LON", "F BRE", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F POR", "A GAS", "A PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F HEL", "A RUH", "A KIE"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A MUN", "F ION", "A TYR", "F WES", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A UKR", "A NWY", "F SKA", "F SEV", "A SIL", "A BER"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F BLA", "A ARM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "SER", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON", "BRE", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN", "HOL"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "NAP", "MUN", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SWE", "WAR", "MOS", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"ANK", "BUL", "CON", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1902M
LOG(INFO) << "\nPreparing to process: F1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB S A BUD - TRI", "A SER S A GAL - RUM", "A BUD - TRI", "A GAL - RUM"});
game.set_orders("ENGLAND", {"A LON - HOL VIA", "F BRE H", "F NTH C A LON - HOL", "F ENG S F BRE"});
game.set_orders("FRANCE", {"F POR - SPA/SC", "A PIC - BEL", "A GAS S F POR - SPA"});
game.set_orders("GERMANY", {"A KIE S A MUN", "A RUH - BEL", "F HEL - DEN"});
game.set_orders("ITALY", {"A VEN - TRI", "A MUN - BUR", "F WES - LYO", "F ION - ADR", "A TYR S A VEN - TRI"});
game.set_orders("RUSSIA", {"F SEV H", "A UKR S F SEV", "A NWY H", "A BER S A SIL - MUN", "A SIL - MUN", "F SKA - NTH"});
game.set_orders("TURKEY", {"A BUL S F AEG - GRE", "A ARM - SEV", "F AEG - GRE", "F BLA S A ARM - SEV"});
game.process();

LOG(INFO) << "\nTesting state: W1902A ";
{ // state tests: W1902A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1902A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "F ALB", "A RUM", "A BUD"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "A HOL", "F BRE", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A GAS", "A PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A RUH", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F LYO", "A BUR", "A TYR", "F ADR", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A UKR", "A NWY", "F SKA", "A MUN", "F SEV", "A BER"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "A BUL", "F BLA", "A ARM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "BRE", "LON", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SWE", "WAR", "MUN", "MOS", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "GRE", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1902A
LOG(INFO) << "\nPreparing to process: W1902A ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE B"});
game.set_orders("ENGLAND", {"F LON B"});
game.set_orders("FRANCE", {"A PAR B"});
game.set_orders("GERMANY", {"A RUH D"});
game.set_orders("ITALY", {"A TYR D"});
game.set_orders("RUSSIA", {"A WAR B", "F STP/NC B"});
game.set_orders("TURKEY", {"F CON B"});
game.process();

LOG(INFO) << "\nTesting state: S1903M ";
{ // state tests: S1903M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1903M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A RUM", "F ALB", "A VIE", "A BUD"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F LON", "A HOL", "F NTH", "F BRE"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A GAS", "A PAR", "A PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A BUR", "F ADR", "F LYO", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A UKR", "A WAR", "A NWY", "F SKA", "F STP/NC", "A MUN", "F SEV", "A BER"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "A BUL", "F BLA", "A ARM", "F CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "BRE", "LON", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SWE", "WAR", "MUN", "MOS", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "GRE", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1903M
LOG(INFO) << "\nPreparing to process: S1903M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB S A BUD - TRI", "A SER S A RUM", "A RUM S A ARM - SEV", "A VIE - TYR", "A BUD - TRI"});
game.set_orders("ENGLAND", {"F LON - NTH", "A HOL S F NTH - BEL", "F BRE S F ENG - PIC", "F NTH - BEL", "F ENG - PIC"});
game.set_orders("FRANCE", {"A PIC - BRE", "A PAR S A PIC - BRE", "A GAS S F SPA/SC - MAR", "F SPA/SC - MAR"});
game.set_orders("GERMANY", {"F DEN - SWE", "A KIE - BER"});
game.set_orders("ITALY", {"A VEN S F ADR - TRI", "A BUR - MAR", "F LYO S A BUR - MAR", "F ADR - TRI"});
game.set_orders("RUSSIA", {"F SEV H", "A UKR S F SEV", "A WAR - SIL", "A NWY - SWE", "A BER - KIE", "A MUN S A BER - KIE", "F SKA - DEN", "F STP/NC - NWY"});
game.set_orders("TURKEY", {"F GRE - ION", "A BUL S A ARM - RUM", "F CON - AEG", "A ARM - RUM VIA", "F BLA C A ARM - RUM"});
game.process();

LOG(INFO) << "\nTesting state: S1903R ";
{ // state tests: S1903R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1903R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A RUM", "F ALB", "A BUD", "A TYR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F PIC", "A HOL", "F BEL", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A GAS", "A PAR", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A BUR", "F ADR", "F LYO", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "A UKR", "A NWY", "F SKA", "F STP/NC", "A MUN", "A SIL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F BLA", "F ION", "A ARM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "BRE", "LON", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SWE", "WAR", "MUN", "MOS", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "GRE", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1903R
LOG(INFO) << "\nPreparing to process: S1903R ";

// Submit orders
game.set_orders("ENGLAND", {"F BRE R MAO"});
game.set_orders("GERMANY", {"A KIE R RUH"});
game.process();

LOG(INFO) << "\nTesting state: F1903M ";
{ // state tests: F1903M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1903M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A RUM", "F ALB", "A BUD", "A TYR"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F PIC", "F MAO", "F BEL", "A HOL", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A GAS", "A PAR", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A BUR", "F ADR", "F LYO", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "A UKR", "A NWY", "F SKA", "F STP/NC", "A MUN", "A SIL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F BLA", "F ION", "A ARM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "BRE", "LON", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SWE", "WAR", "MUN", "MOS", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "GRE", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1903M
LOG(INFO) << "\nPreparing to process: F1903M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB S A TYR - TRI", "A SER S A RUM - BUL", "A RUM - BUL", "A TYR - TRI", "A BUD - RUM"});
game.set_orders("ENGLAND", {"A HOL S F BEL", "F BEL S A HOL", "F PIC - ENG", "F NTH - HEL", "F MAO - POR"});
game.set_orders("FRANCE", {"A BRE H", "A PAR S A BRE", "A GAS - MAR", "F SPA/SC - POR"});
game.set_orders("GERMANY", {"F DEN - KIE", "A RUH S F DEN - KIE"});
game.set_orders("ITALY", {"A VEN - TRI", "A BUR - MAR", "F LYO - SPA/SC", "F ADR - ION"});
game.set_orders("RUSSIA", {"F SEV H", "A UKR S F SEV", "A NWY - SWE", "A KIE S F SKA - DEN", "A SIL H", "A MUN - RUH", "F SKA - DEN", "F STP/NC - NWY"});
game.set_orders("TURKEY", {"A BUL S F AEG - GRE", "A ARM - SEV", "F ION - NAP", "F AEG - GRE", "F BLA S A ARM - SEV"});
game.process();

LOG(INFO) << "\nTesting state: F1903R ";
{ // state tests: F1903R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1903R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BUL", "A RUM", "F ALB", "A TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F MAO", "F BEL", "A HOL", "F HEL"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A GAS", "A PAR", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A BUR", "F ION", "F LYO", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "A UKR", "A SWE", "F DEN", "F NWY", "A MUN", "A SIL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F BLA", "A ARM", "F NAP"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "BRE", "LON", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"KIE", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SWE", "WAR", "MUN", "MOS", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "GRE", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1903R
LOG(INFO) << "\nPreparing to process: F1903R ";

// Submit orders
game.set_orders("GERMANY", {"F DEN R NTH"});
game.set_orders("TURKEY", {"A BUL R CON"});
game.process();

LOG(INFO) << "\nTesting state: W1903A ";
{ // state tests: W1903A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1903A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BUL", "A RUM", "F ALB", "A TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F MAO", "F BEL", "A HOL", "F HEL"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A GAS", "A PAR", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A RUH", "F NTH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A BUR", "F ION", "F LYO", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "A UKR", "A SWE", "F DEN", "F NWY", "A MUN", "A SIL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F BLA", "F NAP", "A CON", "A ARM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "BUL", "RUM", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"GRE", "NAP", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1903A
LOG(INFO) << "\nPreparing to process: W1903A ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE B"});
game.set_orders("FRANCE", {"F MAR B"});
game.set_orders("GERMANY", {"A RUH D", "F NTH D"});
game.set_orders("ITALY", {"A BUR D"});
game.set_orders("RUSSIA", {"A WAR B", "F STP/NC B"});
game.process();

LOG(INFO) << "\nTesting state: S1904M ";
{ // state tests: S1904M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1904M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BUL", "A RUM", "F ALB", "A VIE", "A TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F MAO", "F BEL", "A HOL", "F HEL"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F MAR", "A GAS", "A BRE", "F SPA/SC", "A PAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F LYO", "F ION", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "A UKR", "A SWE", "A WAR", "F DEN", "F NWY", "A MUN", "F STP/NC", "A SIL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F GRE", "F BLA", "F NAP", "A CON", "A ARM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "BUL", "RUM", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"GRE", "NAP", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1904M
LOG(INFO) << "\nPreparing to process: S1904M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB - GRE", "A SER - TRI", "A BUL - SER", "A RUM S A ARM - SEV", "A VIE S A SER - TRI", "A TRI - TYR"});
game.set_orders("ENGLAND", {"A HOL S F BEL", "F BEL S A HOL", "F HEL S F ENG - NTH", "F ENG - NTH", "F MAO - NAO"});
game.set_orders("FRANCE", {"A BRE H", "A PAR S A BRE", "F MAR - LYO", "A GAS - SPA", "F SPA/SC - MAO"});
game.set_orders("ITALY", {"A VEN - ROM", "F LYO - TYS", "F ION - EAS"});
game.set_orders("RUSSIA", {"F SEV H", "A UKR S F SEV", "A WAR - SIL", "A SWE - DEN", "F NWY - NWG", "F DEN - NTH", "A KIE S A SWE - DEN", "A SIL - MUN", "A MUN - BUR", "F STP/NC - NWY"});
game.set_orders("TURKEY", {"F NAP - TYS", "F GRE S A ARM - BUL", "A CON S A ARM - BUL", "A ARM - BUL VIA", "F BLA C A ARM - BUL"});
game.process();

LOG(INFO) << "\nTesting state: F1904M ";
{ // state tests: F1904M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1904M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A RUM", "F ALB", "A VIE", "A TYR", "A TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BEL", "A HOL", "F NTH", "F HEL", "F NAO"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F MAR", "F MAO", "A BRE", "A PAR", "A SPA"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F LYO", "A ROM", "F EAS"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "A SWE", "A UKR", "F NWG", "F DEN", "A BUR", "A MUN", "F NWY", "A SIL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F GRE", "F BLA", "F NAP", "A CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "BUL", "RUM", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "VEN", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"GRE", "NAP", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1904M
LOG(INFO) << "\nPreparing to process: F1904M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB S A SER - GRE", "A SER - GRE", "A RUM - SER", "A TYR - VEN", "A VIE - TYR", "A TRI S A TYR - VEN"});
game.set_orders("ENGLAND", {"A HOL - KIE", "F BEL - NTH", "F NTH - EDI", "F HEL S A HOL - KIE", "F NAO - NWG"});
game.set_orders("FRANCE", {"A SPA - MAR", "A BRE - PIC", "A PAR - BUR", "F MAR - LYO", "F MAO - WES"});
game.set_orders("ITALY", {"A ROM - NAP", "F LYO - WES", "F EAS - SMY"});
game.set_orders("RUSSIA", {"F SEV - ARM", "A UKR - SEV", "A SWE - NWY", "F NWY - NTH", "F DEN S F NWY - NTH", "A KIE H", "A SIL H", "A MUN S A KIE", "A BUR - BEL", "F NWG S F NWY - NTH"});
game.set_orders("TURKEY", {"F NAP H", "F GRE S A BUL", "A BUL S F GRE", "A CON - SMY", "F BLA S A BUL"});
game.process();

LOG(INFO) << "\nTesting state: W1904A ";
{ // state tests: W1904A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1904A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A RUM", "A VEN", "F ALB", "A TYR", "A TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BEL", "A HOL", "F EDI", "F HEL", "F NAO"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F MAR", "F MAO", "A PIC", "A PAR", "A SPA"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F LYO", "A ROM", "F EAS"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "F ARM", "F NWG", "A NWY", "F DEN", "A BUR", "A MUN", "F NTH", "A SIL", "A SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F GRE", "F BLA", "F NAP", "A CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"GRE", "BUL", "NAP", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1904A
LOG(INFO) << "\nPreparing to process: W1904A ";

// Submit orders
game.set_orders("ITALY", {"F EAS D"});
game.set_orders("TURKEY", {"A ANK B"});
game.process();

LOG(INFO) << "\nTesting state: S1905M ";
{ // state tests: S1905M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1905M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A RUM", "A VEN", "F ALB", "A TYR", "A TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BEL", "A HOL", "F EDI", "F HEL", "F NAO"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F MAR", "F MAO", "A PIC", "A PAR", "A SPA"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F LYO", "A ROM"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "F ARM", "F NWG", "A NWY", "F DEN", "A BUR", "A MUN", "F NTH", "A SIL", "A SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F GRE", "A ANK", "F BLA", "F NAP", "A CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"GRE", "BUL", "NAP", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1905M
LOG(INFO) << "\nPreparing to process: S1905M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VEN - APU", "F ALB S A SER - GRE", "A SER - GRE", "A RUM - BUL", "A TYR - VEN", "A TRI - SER"});
game.set_orders("ENGLAND", {"F EDI S F HEL - NTH", "A HOL H", "F BEL - ENG", "F HEL - NTH", "F NAO - NWG"});
game.set_orders("FRANCE", {"A SPA - GAS", "A PIC S A PAR - BUR", "A PAR - BUR", "F MAR - LYO", "F MAO - NAF"});
game.set_orders("ITALY", {"A ROM - NAP", "F LYO - WES"});
game.set_orders("RUSSIA", {"F ARM H", "A SEV S F ARM", "A NWY - LON VIA", "F DEN - HEL", "A KIE H", "A SIL H", "A MUN S A KIE", "A BUR S A PIC - BEL", "F NWG - EDI", "F NTH C A NWY - LON"});
game.set_orders("TURKEY", {"F NAP - TYS", "F GRE S A CON - BUL", "A BUL - RUM", "A CON - BUL", "A ANK - ARM", "F BLA S A BUL - RUM"});
game.process();

LOG(INFO) << "\nTesting state: S1905R ";
{ // state tests: S1905R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1905R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A GRE", "F ALB", "A VEN", "A APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "A HOL", "F EDI", "F HEL", "F NAO"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A GAS", "F NAF", "A BUR", "A PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F WES", "A NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "F ARM", "F NWG", "F DEN", "A MUN", "A LON", "F NTH", "A SIL", "A SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A ANK", "A RUM", "F BLA", "F TYS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"GRE", "BUL", "NAP", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1905R
LOG(INFO) << "\nPreparing to process: S1905R ";

// Submit orders
game.set_orders("AUSTRIA", {"A RUM R BUD"});
game.set_orders("RUSSIA", {"A BUR R MAR"});
game.set_orders("TURKEY", {"F GRE R ION"});
game.process();

LOG(INFO) << "\nTesting state: F1905M ";
{ // state tests: F1905M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1905M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A GRE", "F ALB", "A BUD", "A VEN", "A APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "A HOL", "F EDI", "F HEL", "F NAO"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F LYO", "A GAS", "F NAF", "A BUR", "A PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F WES", "A NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "F ARM", "A MAR", "F NWG", "F DEN", "A MUN", "A LON", "F NTH", "A SIL", "A SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A ANK", "A RUM", "F BLA", "F TYS", "F ION"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"GRE", "BUL", "NAP", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1905M
LOG(INFO) << "\nPreparing to process: F1905M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VEN - ROM", "A APU S A VEN - ROM", "A GRE S A BUL", "F ALB - ION", "A SER S A GRE", "A BUD S A SER"});
game.set_orders("ENGLAND", {"F EDI S F NAO - NWG", "A HOL - BEL", "F HEL - HOL", "F NAO - NWG", "F ENG - BRE"});
game.set_orders("FRANCE", {"F NAF - TUN", "A PIC - BUR", "A BUR - MAR", "A GAS S A BUR - MAR", "F LYO - SPA/SC"});
game.set_orders("ITALY", {"A NAP H", "F WES - TUN"});
game.set_orders("RUSSIA", {"A LON H", "F ARM S A SEV", "A SEV H", "F DEN - HEL", "A KIE S F NTH - HOL", "A SIL H", "A MUN - BUR", "A MAR H", "F NWG H", "F NTH - HOL"});
game.set_orders("TURKEY", {"A BUL S A RUM", "A RUM S A BUL", "A ANK - ARM", "F TYS - NAP", "F ION S F TYS - NAP", "F BLA H"});
game.process();

LOG(INFO) << "\nTesting state: F1905R ";
{ // state tests: F1905R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1905R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A ROM", "A GRE", "F ALB", "A BUD", "A APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NWG", "F EDI", "A BEL", "F HEL", "F BRE"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "A GAS", "F NAF", "A PIC", "F SPA/SC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F WES", "A NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "F ARM", "F DEN", "A MUN", "A LON", "F HOL", "A SIL", "A SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A ANK", "A RUM", "F BLA", "F TYS", "F ION"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "VIE", "TRI", "RUM", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON", "BEL", "HOL"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"ROM", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"GRE", "BUL", "NAP", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1905R
LOG(INFO) << "\nPreparing to process: F1905R ";

// Submit orders
game.set_orders("RUSSIA", {"A MAR D", "F NWG R NWY"});
game.process();

LOG(INFO) << "\nTesting state: W1905A ";
{ // state tests: W1905A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1905A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A ROM", "A GRE", "F ALB", "A BUD", "A APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NWG", "F EDI", "A BEL", "F HEL", "F BRE"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "A GAS", "F NAF", "A PIC", "F SPA/SC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F WES", "A NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "F ARM", "F DEN", "F NWY", "A MUN", "A LON", "F HOL", "A SIL", "A SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A ANK", "A RUM", "F BLA", "F TYS", "F ION"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "BEL", "BRE", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "HOL", "LON", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1905A
LOG(INFO) << "\nPreparing to process: W1905A ";

// Submit orders
game.set_orders("AUSTRIA", {"F TRI B"});
game.set_orders("ENGLAND", {"A BEL D"});
game.set_orders("FRANCE", {"A MAR D"});
game.set_orders("RUSSIA", {"A WAR B", "A MOS B", "F STP/NC B"});
game.set_orders("TURKEY", {"F TYS D"});
game.process();

LOG(INFO) << "\nTesting state: S1906M ";
{ // state tests: S1906M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1906M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A ROM", "A GRE", "F ALB", "A BUD", "F TRI", "A APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F HEL", "F NWG", "F EDI", "F BRE"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A GAS", "A PIC", "F NAF"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F WES", "A NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A KIE", "A MOS", "F ARM", "A WAR", "F DEN", "F NWY", "A MUN", "F STP/NC", "A LON", "F HOL", "A SIL", "A SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A ANK", "A RUM", "F BLA", "F ION"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "BEL", "BRE", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "HOL", "LON", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1906M
LOG(INFO) << "\nPreparing to process: S1906M ";

// Submit orders
game.set_orders("AUSTRIA", {"A ROM S A APU", "A APU S F ION - NAP", "A GRE - SER", "F ALB - GRE", "A SER - BUD", "F TRI - ADR", "A BUD - VIE"});
game.set_orders("ENGLAND", {"F EDI S F HEL - NTH", "F BRE - ENG", "F NWG S F HEL - NTH", "F HEL - NTH"});
game.set_orders("FRANCE", {"F NAF S F SPA/SC - WES", "A PIC - BRE", "A GAS S A PIC - BRE", "F SPA/SC - WES"});
game.set_orders("ITALY", {"A NAP H", "F WES - TYS"});
game.set_orders("RUSSIA", {"A LON - YOR", "F ARM - BLA", "A SEV - ARM", "A WAR - GAL", "A MOS - UKR", "F NWY - NTH", "F DEN S F NWY - NTH", "A KIE - RUH", "A SIL S A WAR - GAL", "A MUN - BUR", "F HOL S F NWY - NTH", "F STP/NC - NWY"});
game.set_orders("TURKEY", {"A BUL S A RUM", "A RUM - SEV", "A ANK - ARM", "F ION - AEG", "F BLA S A ANK - ARM"});
game.process();

LOG(INFO) << "\nTesting state: F1906M ";
{ // state tests: F1906M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1906M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A ROM", "F GRE", "A VIE", "A BUD", "F ADR", "A APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F HEL", "F NWG", "F EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A GAS", "F WES", "A BRE", "F NAF"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS", "A NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A RUH", "A UKR", "F DEN", "F NWY", "F STP/NC", "A BUR", "F HOL", "A SIL", "A SEV", "A YOR", "A GAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A ARM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "BEL", "BRE", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "POR", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "TUN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "HOL", "LON", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1906M
LOG(INFO) << "\nPreparing to process: F1906M ";

// Submit orders
game.set_orders("AUSTRIA", {"A ROM S A APU", "A APU S A ROM", "F GRE S F ADR - ION", "A SER S A BUL - RUM", "F ADR - ION", "A VIE - GAL", "A BUD S A BUL - RUM"});
game.set_orders("ENGLAND", {"F EDI S F NWG - NTH", "F NWG - NTH", "F HEL S F NWG - NTH", "F ENG - LON"});
game.set_orders("FRANCE", {"F NAF - TUN", "A BRE - PAR", "A GAS - MAR", "F WES S F NAF - TUN"});
game.set_orders("ITALY", {"A NAP - ROM", "F TYS S A NAP - ROM"});
game.set_orders("RUSSIA", {"A YOR - LVP", "A SEV - RUM", "A UKR S A SEV - RUM", "F NWY - SKA", "F DEN - KIE", "A SIL - BOH", "A RUH - BEL", "F HOL - KIE", "A BUR - PAR", "A GAL S A SEV - RUM", "F STP/NC - NWY"});
game.set_orders("TURKEY", {"A BUL S A SER", "A RUM - UKR", "A ARM - SEV", "F AEG S A BUL", "F BLA S A ARM - SEV"});
game.process();

LOG(INFO) << "\nTesting state: W1906A ";
{ // state tests: W1906A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1906A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A ROM", "F GRE", "A VIE", "A BUD", "F ION", "A APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F HEL", "F LON", "F EDI", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F TUN", "A MAR", "F WES", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS", "A NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A UKR", "A BOH", "A RUM", "F SKA", "F DEN", "A BUR", "F NWY", "F HOL", "A BEL", "A GAL", "A LVP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A SEV", "A BUL", "F BLA", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "LVP", "SWE", "RUM", "WAR", "MUN", "MOS", "DEN", "NWY", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "CON", "SEV", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1906A
LOG(INFO) << "\nPreparing to process: W1906A ";

// Submit orders
game.set_orders("ENGLAND", {"F NTH D", "F HEL D"});
game.set_orders("FRANCE", {"A PAR B"});
game.set_orders("ITALY", {"A NAP D"});
game.set_orders("RUSSIA", {"A WAR B", "A MOS B"});
game.set_orders("TURKEY", {"A CON B"});
game.process();

LOG(INFO) << "\nTesting state: S1907M ";
{ // state tests: S1907M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1907M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A ROM", "F GRE", "A VIE", "A BUD", "F ION", "A APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F EDI", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "A BRE", "F WES", "A PAR", "F TUN"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A UKR", "A WAR", "A BOH", "A RUM", "F SKA", "F DEN", "A BUR", "F NWY", "F HOL", "A BEL", "A GAL", "A LVP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F BLA", "A CON", "A SEV", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "LVP", "SWE", "RUM", "WAR", "MUN", "MOS", "DEN", "NWY", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "CON", "SEV", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1907M
LOG(INFO) << "\nPreparing to process: S1907M ";

// Submit orders
game.set_orders("AUSTRIA", {"A ROM S F ION - NAP", "A APU - VEN", "F GRE - ION", "A SER S A BUD", "F ION - NAP", "A VIE S A BUD", "A BUD S A BUL - RUM"});
game.set_orders("ENGLAND", {"F EDI H", "F LON H"});
game.set_orders("FRANCE", {"F TUN H", "A BRE - PIC", "A PAR S A MAR - BUR", "A MAR - BUR", "F WES - MAO"});
game.set_orders("ITALY", {"F TYS - LYO"});
game.set_orders("RUSSIA", {"A LVP - YOR", "A RUM - SEV", "A UKR S A RUM - SEV", "A WAR S A GAL", "A MOS S A RUM - SEV", "F NWY - NWG", "F DEN S F SKA - NTH", "F HOL S F SKA - NTH", "A BEL - BUR", "A BUR - GAS", "F SKA - NTH", "A BOH - MUN", "A GAL H"});
game.set_orders("TURKEY", {"A BUL - RUM", "A CON - BUL", "A SEV S A BUL - RUM", "F AEG S A CON - BUL", "F BLA S A SEV"});
game.process();

LOG(INFO) << "\nTesting state: S1907R ";
{ // state tests: S1907R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1907R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A ROM", "A VIE", "A BUD", "F NAP", "F ION", "A VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F EDI", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F MAO", "A BUR", "A PIC", "A PAR", "F TUN"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F LYO"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A UKR", "A WAR", "A GAS", "F NWG", "F DEN", "A MUN", "A BEL", "F HOL", "F NTH", "A SEV", "A GAL", "A YOR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "F AEG", "F BLA", "A RUM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "LVP", "SWE", "RUM", "WAR", "MUN", "MOS", "DEN", "NWY", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "CON", "SEV", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1907R
LOG(INFO) << "\nPreparing to process: S1907R ";

// Submit orders
game.set_orders("TURKEY", {"A SEV R ARM"});
game.process();

LOG(INFO) << "\nTesting state: F1907M ";
{ // state tests: F1907M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1907M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A ROM", "A VIE", "A BUD", "F NAP", "F ION", "A VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F EDI", "F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F MAO", "A BUR", "A PIC", "A PAR", "F TUN"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F LYO"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A UKR", "A WAR", "A GAS", "F NWG", "F DEN", "A MUN", "A BEL", "F HOL", "F NTH", "A SEV", "A GAL", "A YOR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A ARM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "LVP", "SWE", "RUM", "WAR", "MUN", "MOS", "DEN", "NWY", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "CON", "SEV", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1907M
LOG(INFO) << "\nPreparing to process: F1907M ";

// Submit orders
game.set_orders("AUSTRIA", {"F NAP S F ION - TYS", "A ROM - VEN", "A VEN - TYR", "A SER - BUD", "F ION - TYS", "A VIE - BOH", "A BUD - VIE"});
game.set_orders("ENGLAND", {"F EDI S F LON - YOR", "F LON - YOR"});
game.set_orders("FRANCE", {"F TUN - WES", "A PIC - BRE", "A PAR - BRE", "A BUR - MAR", "F MAO - SPA/SC"});
game.set_orders("ITALY", {"F LYO - SPA/SC"});
game.set_orders("RUSSIA", {"A YOR - EDI", "A SEV H", "A UKR S A SEV", "A WAR - SIL", "A MOS S A SEV", "F DEN - NTH", "A MUN H", "F HOL S A BEL", "A BEL H", "A GAS S F LYO - SPA", "F NWG S A YOR - EDI", "F NTH - ENG", "A GAL - VIE"});
game.set_orders("TURKEY", {"A BUL S A RUM", "A RUM S A VIE - GAL", "A ARM - SEV", "F AEG S A BUL", "F BLA S A RUM"});
game.process();

LOG(INFO) << "\nTesting state: F1907R ";
{ // state tests: F1907R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1907R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "F TYS", "F NAP", "A BUD", "A TYR", "A VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F YOR"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F MAO", "A PIC", "A PAR", "F WES"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F SPA/SC"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A EDI", "A UKR", "F ENG", "A GAS", "F NWG", "A MUN", "F HOL", "A BEL", "F NTH", "A SEV", "A SIL", "A GAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A ARM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "SPA", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "KIE", "LVP", "SWE", "RUM", "WAR", "MUN", "MOS", "DEN", "NWY", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "CON", "SEV", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1907R
LOG(INFO) << "\nPreparing to process: F1907R ";

// Submit orders
game.set_orders("ENGLAND", {"F EDI R CLY"});
game.process();

LOG(INFO) << "\nTesting state: W1907A ";
{ // state tests: W1907A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1907A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "F TYS", "F NAP", "A BUD", "A TYR", "A VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F CLY", "F YOR"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F MAO", "A PIC", "A PAR", "F WES"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F SPA/SC"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A EDI", "A UKR", "F ENG", "A GAS", "F NWG", "A MUN", "F HOL", "A BEL", "F NTH", "A SEV", "A SIL", "A GAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A ARM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "NAP", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"SPA"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "EDI", "KIE", "LVP", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1907A
LOG(INFO) << "\nPreparing to process: W1907A ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE B"});
game.set_orders("ENGLAND", {"F CLY D"});
game.set_orders("RUSSIA", {"A WAR B"});
game.process();

LOG(INFO) << "\nTesting state: S1908M ";
{ // state tests: S1908M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1908M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "A VIE", "F TYS", "F NAP", "A BUD", "A TYR", "A VEN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F YOR"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F MAO", "A PIC", "A PAR", "F WES"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F SPA/SC"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A EDI", "A UKR", "A WAR", "F ENG", "A GAS", "F NWG", "A MUN", "F HOL", "A BEL", "F NTH", "A SEV", "A SIL", "A GAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A ARM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "NAP", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"SPA"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "EDI", "KIE", "LVP", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1908M
LOG(INFO) << "\nPreparing to process: S1908M ";

// Submit orders
game.set_orders("AUSTRIA", {"F NAP - TYS", "A VEN - TYR", "A SER S A RUM", "F TYS - WES", "A TYR - BOH", "A BOH - GAL", "A VIE S A BOH - GAL", "A BUD S A BOH - GAL"});
game.set_orders("ENGLAND", {"F YOR - LON"});
game.set_orders("FRANCE", {"A PIC - BRE", "A PAR S A PIC - BRE", "A MAR - GAS", "F MAO S F WES - SPA", "F WES - SPA/SC"});
game.set_orders("ITALY", {"F SPA/SC - POR"});
game.set_orders("RUSSIA", {"A EDI - YOR", "A SEV H", "A UKR S A SEV", "A WAR - PRU", "A MOS S A SEV", "A SIL S A MUN", "A MUN H", "F HOL - NTH", "A BEL - PIC", "A GAS S F ENG - BRE", "F NWG - NAO", "F NTH - ENG", "F ENG - BRE", "A GAL H"});
game.set_orders("TURKEY", {"A BUL S A RUM", "A RUM S A VIE - GAL", "A ARM - SEV", "F AEG - ION", "F BLA S A RUM"});
game.process();

LOG(INFO) << "\nTesting state: S1908R ";
{ // state tests: S1908R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1908R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "A VIE", "F TYS", "A BUD", "A TYR", "A GAL", "F WES"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F MAO", "A BRE", "F SPA/SC", "A PAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F POR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A UKR", "A PRU", "F ENG", "A GAS", "A MUN", "F HOL", "A PIC", "F NTH", "A SIL", "A SEV", "F NAO", "A YOR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "F ION", "A ARM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "NAP", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"SPA"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "EDI", "KIE", "LVP", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1908R
LOG(INFO) << "\nPreparing to process: S1908R ";

// Submit orders
game.set_orders("RUSSIA", {"A GAL R WAR"});
game.process();

LOG(INFO) << "\nTesting state: F1908M ";
{ // state tests: F1908M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1908M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "A VIE", "F TYS", "A BUD", "A TYR", "A GAL", "F WES"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F LON"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F MAO", "A BRE", "F SPA/SC", "A PAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F POR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A UKR", "A WAR", "A PRU", "F ENG", "A GAS", "A MUN", "F HOL", "A PIC", "F NTH", "A SIL", "A SEV", "F NAO", "A YOR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "F ION", "A ARM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "NAP", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"SPA"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "EDI", "KIE", "LVP", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1908M
LOG(INFO) << "\nPreparing to process: F1908M ";

// Submit orders
game.set_orders("AUSTRIA", {"A SER S A RUM", "F WES - NAF", "F TYS - WES", "A TYR S A BOH - MUN", "A BOH - MUN", "A VIE - BOH", "A BUD - GAL", "A GAL - SIL"});
game.set_orders("ENGLAND", {"F LON H"});
game.set_orders("FRANCE", {"A BRE H", "A PAR S A BRE", "A MAR - GAS", "F MAO - SPA/SC", "F SPA/SC S F MAO - POR"});
game.set_orders("ITALY", {"F POR - MAO"});
game.set_orders("RUSSIA", {"A YOR S F NTH - LON", "A SEV H", "A UKR S A SEV", "A WAR - GAL", "A MOS S A SEV", "A PRU - BER", "A SIL S A MUN", "A MUN H", "F HOL - BEL", "A PIC - BRE", "A GAS S A PIC - BRE", "F NTH - LON", "F NAO - MAO", "F ENG S F NAO - MAO"});
game.set_orders("TURKEY", {"A BUL - RUM", "A RUM - SEV", "A ARM S A RUM - SEV", "F ION - TUN", "F BLA S A RUM - SEV"});
game.process();

LOG(INFO) << "\nTesting state: F1908R ";
{ // state tests: F1908R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1908R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "A BUD", "F NAF", "A MUN", "A TYR", "A GAL", "F WES"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A PAR", "A MAR", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F POR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A UKR", "A WAR", "F ENG", "A GAS", "F MAO", "F BEL", "F LON", "A PIC", "A SIL", "A SEV", "A BER", "A YOR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A ARM", "F TUN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "NAP", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "MAR", "POR", "BRE", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"SPA"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "EDI", "KIE", "LVP", "SWE", "WAR", "MUN", "MOS", "DEN", "NWY", "SEV", "HOL", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1908R
LOG(INFO) << "\nPreparing to process: F1908R ";

// Submit orders
game.set_orders("ENGLAND", {"F LON R WAL"});
game.set_orders("FRANCE", {"F MAO R IRI"});
game.set_orders("RUSSIA", {"A MUN R KIE"});
game.process();

LOG(INFO) << "\nTesting state: W1908A ";
{ // state tests: W1908A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1908A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "A BUD", "F NAF", "A MUN", "A TYR", "A GAL", "F WES"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F WAL"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "A BRE", "F SPA/SC", "A PAR", "F IRI"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F POR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A KIE", "A UKR", "A WAR", "F ENG", "A GAS", "F MAO", "F BEL", "F LON", "A PIC", "A SIL", "A SEV", "A BER", "A YOR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A ARM", "F TUN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "NAP", "MUN", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "BRE", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"POR"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "EDI", "KIE", "LVP", "SWE", "WAR", "DEN", "MOS", "NWY", "SEV", "HOL", "LON", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "TUN", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1908A
LOG(INFO) << "\nPreparing to process: W1908A ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE B"});
game.set_orders("ENGLAND", {"F WAL D"});
game.set_orders("FRANCE", {"F IRI D"});
game.set_orders("TURKEY", {"A CON B"});
game.process();

LOG(INFO) << "\nTesting state: S1909M ";
{ // state tests: S1909M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1909M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "A VIE", "A BUD", "F NAF", "A MUN", "A TYR", "A GAL", "F WES"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A PAR", "A MAR", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F POR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A KIE", "A UKR", "A WAR", "F ENG", "A GAS", "F MAO", "F BEL", "F LON", "A PIC", "A SIL", "A SEV", "A BER", "A YOR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A CON", "A ARM", "F TUN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "NAP", "MUN", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "BRE", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"POR"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "EDI", "KIE", "LVP", "SWE", "WAR", "DEN", "MOS", "NWY", "SEV", "HOL", "LON", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "TUN", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1909M
LOG(INFO) << "\nPreparing to process: S1909M ";

// Submit orders
game.process();

LOG(INFO) << "\nTesting state: F1909M ";
{ // state tests: F1909M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1909M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "A VIE", "A BUD", "F NAF", "A MUN", "A TYR", "A GAL", "F WES"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A PAR", "A MAR", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F POR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A KIE", "A UKR", "A WAR", "F ENG", "A GAS", "F MAO", "F BEL", "F LON", "A PIC", "A SIL", "A SEV", "A BER", "A YOR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A CON", "A ARM", "F TUN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "NAP", "MUN", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "BRE", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"POR"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "EDI", "KIE", "LVP", "SWE", "WAR", "DEN", "MOS", "NWY", "SEV", "HOL", "LON", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "TUN", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1909M
LOG(INFO) << "\nPreparing to process: F1909M ";

// Submit orders
game.process();

LOG(INFO) << "\nTesting state: S1910M ";
{ // state tests: S1910M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1910M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A BOH", "A VIE", "A BUD", "F NAF", "A MUN", "A TYR", "A GAL", "F WES"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F SPA/SC", "A PAR", "A MAR", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F POR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A KIE", "A UKR", "A WAR", "F ENG", "A GAS", "F MAO", "F BEL", "F LON", "A PIC", "A SIL", "A SEV", "A BER", "A YOR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A BUL", "A RUM", "F BLA", "A CON", "A ARM", "F TUN"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"ROM", "SER", "VIE", "TRI", "GRE", "NAP", "MUN", "BUD", "VEN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "SPA", "BRE", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"POR"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "EDI", "KIE", "LVP", "SWE", "WAR", "DEN", "MOS", "NWY", "SEV", "HOL", "LON", "BEL", "STP"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"BUL", "RUM", "CON", "TUN", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1910M
LOG(INFO) << "\nPreparing to process: S1910M ";

// Submit orders
game.process();


} // TEST_F
} // namespace dipcc

