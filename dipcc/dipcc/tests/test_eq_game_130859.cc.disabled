
// This file is auto-generated by render_equivalence_test.py
//
#include <algorithm>
#include <vector>
#include "../cc/game.h"
#include "../cc/hash.h"
#include "../cc/thirdparty/nlohmann/json.hpp"
#include "consts.h"
#include "utils.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"

using namespace std;
using nlohmann::json;

namespace dipcc {

class GameEquivalenceTest : public ::testing::Test {};

TEST_F(GameEquivalenceTest, Test__checkpoint_jsgray_diplomacy_mila_dataset_data__game_130859_json) {

Game game;


LOG(INFO) << "\nTesting state: S1901M ";
{ // state tests: S1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "F TRI", "A BUD"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F LON", "F EDI", "A LVP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F BRE", "A PAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A MUN", "F KIE", "A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A VEN", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F STP/SC", "A MOS", "F SEV", "A WAR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A SMY", "F ANK", "A CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"BUD", "VIE", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "PAR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "STP", "SEV", "MOS"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1901M
LOG(INFO) << "\nPreparing to process: S1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE - GAL", "A BUD - RUM", "F TRI - ALB"});
game.set_orders("ENGLAND", {"F EDI - NTH", "F LON - ENG", "A LVP - YOR"});
game.set_orders("FRANCE", {"A MAR H", "A PAR - BUR", "F BRE - PIC"});
game.set_orders("GERMANY", {"A BER - SIL", "F KIE - DEN", "A MUN - BUR"});
game.set_orders("ITALY", {"A ROM H", "F NAP H", "A VEN H"});
game.set_orders("RUSSIA", {"F SEV - RUM", "A WAR - GAL", "F STP/SC - FIN", "A MOS - STP"});
game.set_orders("TURKEY", {"A SMY - ARM", "F ANK - BLA", "A CON H"});
game.process();

LOG(INFO) << "\nTesting state: F1901M ";
{ // state tests: F1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "F ALB", "A BUD"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F NTH", "A YOR"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "A PAR", "F PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A MUN", "A SIL", "F DEN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A VEN", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A STP", "F SEV", "A WAR", "F FIN"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "F BLA", "A CON"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"BUD", "VIE", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "PAR", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"WAR", "STP", "SEV", "MOS"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1901M
LOG(INFO) << "\nPreparing to process: F1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB - GRE", "A BUD - RUM", "A VIE - GAL"});
game.set_orders("ENGLAND", {"F ENG H", "F NTH - YOR", "A YOR H"});
game.set_orders("FRANCE", {"A PAR - BRE", "A MAR - SPA", "F PIC S F PIC"});
game.set_orders("GERMANY", {"A MUN - BUR", "F DEN H", "A SIL H"});
game.set_orders("ITALY", {"A ROM H", "F NAP H", "A VEN H"});
game.set_orders("RUSSIA", {"A WAR - SIL", "F SEV - ARM", "F FIN - SWE", "A STP - FIN"});
game.set_orders("TURKEY", {"A CON - BUL", "A ARM H", "F BLA H"});
game.process();

LOG(INFO) << "\nTesting state: W1901A ";
{ // state tests: W1901A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1901A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F GRE", "A RUM", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F NTH", "A YOR"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A SPA", "F PIC", "A BRE"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F DEN", "A SIL", "A BUR"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A VEN", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A FIN", "F SEV", "F SWE", "A WAR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A BUL", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"GRE", "RUM", "VIE", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "PAR", "SPA", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "MOS", "SWE", "STP", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "BUL", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1901A
LOG(INFO) << "\nPreparing to process: W1901A ";

// Submit orders
game.set_orders("AUSTRIA", {"F TRI B", "A BUD B"});
game.set_orders("FRANCE", {"A PAR B"});
game.set_orders("GERMANY", {"F KIE B"});
game.set_orders("TURKEY", {"A ANK B"});
game.process();

LOG(INFO) << "\nTesting state: S1902M ";
{ // state tests: S1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F TRI", "F GRE", "A BUD", "A RUM", "A GAL"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F ENG", "F NTH", "A YOR"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A SPA", "F PIC", "A BRE", "A PAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F DEN", "A SIL", "A BUR", "F KIE"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A VEN", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A FIN", "F SEV", "F SWE", "A WAR"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A ANK", "A BUL", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"GRE", "RUM", "VIE", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "PAR", "SPA", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "MOS", "SWE", "STP", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "BUL", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1902M
LOG(INFO) << "\nPreparing to process: S1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"F GRE - ION", "A BUD - SER", "A GAL - UKR", "F TRI - ADR", "A RUM H"});
game.set_orders("ENGLAND", {"F ENG - BEL", "F NTH - NWY", "A YOR H"});
game.set_orders("FRANCE", {"A SPA - MAR", "F PIC - BRE", "A BRE - GAS", "A PAR - BUR"});
game.set_orders("GERMANY", {"F DEN - SKA", "F KIE - HOL", "A BUR - MAR", "A SIL H"});
game.set_orders("ITALY", {"A ROM H", "F NAP H", "A VEN H"});
game.set_orders("RUSSIA", {"A WAR - PRU", "F SWE - BAL", "A FIN - SWE", "F SEV - BLA"});
game.set_orders("TURKEY", {"F BLA - SEV", "A ANK S F BLA", "A BUL H", "A ARM H"});
game.process();

LOG(INFO) << "\nTesting state: F1902M ";
{ // state tests: F1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"F ADR", "A UKR", "A SER", "F ION", "A RUM"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NWY", "F BEL", "A YOR"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A GAS", "A SPA", "F BRE", "A PAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F SKA", "A SIL", "A BUR", "F HOL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A VEN", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A SWE", "F SEV", "F BAL", "A PRU"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A ANK", "A BUL", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"GRE", "RUM", "VIE", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"EDI", "LVP", "LON"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MAR", "PAR", "SPA", "BRE"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"SEV", "MOS", "SWE", "STP", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "BUL", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1902M
LOG(INFO) << "\nPreparing to process: F1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ION - TUN", "A UKR - MOS", "F ADR - APU", "A RUM H", "A SER H"});
game.set_orders("ENGLAND", {"A YOR H", "F NWY H", "F BEL H"});
game.set_orders("FRANCE", {"A PAR - BRE", "A GAS - MAR", "F BRE - PIC", "A SPA - POR"});
game.set_orders("GERMANY", {"A SIL - WAR", "A BUR - MAR", "F SKA H", "F HOL H"});
game.set_orders("ITALY", {"A ROM H", "F NAP H", "A VEN H"});
game.set_orders("RUSSIA", {"F SEV H", "F BAL - KIE", "A PRU - BER", "A SWE S A SWE"});
game.set_orders("TURKEY", {"F BLA - SEV", "A BUL H", "A ARM H", "A ANK H"});
game.process();

LOG(INFO) << "\nTesting state: W1902A ";
{ // state tests: W1902A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1902A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A SER", "A MOS", "A RUM", "F TUN", "F APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NWY", "F BEL", "A YOR"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A POR", "A GAS", "A BRE", "F PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F SKA", "A BUR", "A WAR", "F HOL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A VEN", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SEV", "F KIE", "A SWE", "A BER"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A ANK", "A BUL", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"GRE", "SER", "RUM", "MOS", "TUN", "VIE", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"NWY", "LON", "BEL", "LVP", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "BRE", "MAR", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"WAR", "MUN", "HOL", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SEV", "SWE", "STP", "KIE"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "BUL", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1902A
LOG(INFO) << "\nPreparing to process: W1902A ";

// Submit orders
game.set_orders("AUSTRIA", {"F TRI B", "A VIE B", "A BUD B"});
game.set_orders("ENGLAND", {"F LON B", "F EDI B"});
game.set_orders("FRANCE", {"F MAR B"});
game.set_orders("RUSSIA", {"A STP B"});
game.process();

LOG(INFO) << "\nTesting state: S1903M ";
{ // state tests: S1903M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1903M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A VIE", "A SER", "F TRI", "A BUD", "A MOS", "A RUM", "F TUN", "F APU"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NWY", "F BEL", "F EDI", "F LON", "A YOR"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A GAS", "A POR", "A BRE", "F MAR", "F PIC"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F SKA", "A BUR", "A WAR", "F HOL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ROM", "A VEN", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F SEV", "F KIE", "A STP", "A BER", "A SWE"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A ARM", "A ANK", "A BUL", "F BLA"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"GRE", "SER", "RUM", "MOS", "TUN", "VIE", "TRI", "BUD"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"NWY", "LON", "BEL", "LVP", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"SPA", "BRE", "MAR", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"WAR", "MUN", "HOL", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"BER", "SEV", "SWE", "STP", "KIE"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "BUL", "ANK", "SMY"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1903M
LOG(INFO) << "\nPreparing to process: S1903M ";

// Submit orders
game.set_orders("AUSTRIA", {"F APU - ION", "A MOS - LVN", "A VIE - BOH", "A BUD - GAL", "A RUM - UKR", "F TRI - ADR", "F TUN - NAF", "A SER H"});
game.set_orders("ENGLAND", {"F EDI - NTH", "F BEL - ENG", "F LON - WAL", "A YOR H", "F NWY H"});
game.set_orders("FRANCE", {"F MAR - PIE", "A GAS - PAR", "F PIC - BEL", "A POR - SPA", "A BRE - GAS"});
game.set_orders("GERMANY", {"A WAR - PRU", "A BUR - PAR", "F SKA - NTH", "F HOL H"});
game.set_orders("ITALY", {"A ROM H", "F NAP H", "A VEN H"});
game.set_orders("RUSSIA", {"A BER - SIL", "A STP H", "A SWE H", "F SEV H", "F KIE H"});
game.set_orders("TURKEY", {"A BUL - GRE", "A ARM H", "A ANK H", "F BLA H"});
game.process();


} // TEST_F
} // namespace dipcc

