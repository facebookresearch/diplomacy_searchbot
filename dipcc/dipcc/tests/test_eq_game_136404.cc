
// This file is auto-generated by render_equivalence_test.py
//
#include <algorithm>
#include <vector>
#include "../cc/game.h"
#include "../cc/hash.h"
#include "../cc/thirdparty/nlohmann/json.hpp"
#include "consts.h"
#include "utils.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"

using namespace std;
using nlohmann::json;

namespace dipcc {

class GameEquivalenceTest : public ::testing::Test {};

TEST_F(GameEquivalenceTest, Test__checkpoint_jsgray_diplomacy_mila_dataset_data__game_136404_json) {

Game game;


LOG(INFO) << "\nTesting state: S1901M ";
{ // state tests: S1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "A VIE", "F TRI"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVP", "F LON", "F EDI"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F BRE", "A PAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER", "F KIE", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VEN", "F NAP", "A ROM"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A MOS", "F SEV", "F STP/SC"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "A SMY", "F ANK"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "BRE", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1901M
LOG(INFO) << "\nPreparing to process: S1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE - BUD", "A BUD - SER", "F TRI - ALB"});
game.set_orders("ENGLAND", {"A LVP - YOR", "F LON - NTH", "F EDI - NWG"});
game.set_orders("FRANCE", {"A PAR - BUR", "F BRE - MAO", "A MAR - SPA"});
game.set_orders("GERMANY", {"A BER - KIE", "A MUN - BOH", "F KIE - HEL"});
game.set_orders("ITALY", {"A ROM - APU", "F NAP - ION", "A VEN H"});
game.set_orders("RUSSIA", {"F STP/SC - BOT", "F SEV - RUM", "A MOS - STP", "A WAR H"});
game.set_orders("TURKEY", {"A CON - BUL", "F ANK - BLA", "A SMY - CON"});
game.process();

LOG(INFO) << "\nTesting state: F1901M ";
{ // state tests: F1901M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1901M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "F ALB", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NWG", "A YOR", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BUR", "A SPA", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A KIE", "A BOH", "F HEL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A APU", "F ION", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F BOT", "F RUM", "A WAR", "A STP"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F BLA", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"PAR", "BRE", "MAR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1901M
LOG(INFO) << "\nPreparing to process: F1901M ";

// Submit orders
game.set_orders("AUSTRIA", {"F ALB - GRE", "A SER S F ALB - GRE", "A BUD S F RUM"});
game.set_orders("ENGLAND", {"A YOR H", "F NWG H", "F NTH H"});
game.set_orders("FRANCE", {"F MAO - POR", "A BUR - BEL", "A SPA H"});
game.set_orders("GERMANY", {"F HEL - DEN", "A KIE - HOL", "A BOH - MUN"});
game.set_orders("ITALY", {"F ION H", "A APU H", "A VEN H"});
game.set_orders("RUSSIA", {"A STP - NWY", "F BOT - SWE", "A WAR - GAL", "F RUM H"});
game.set_orders("TURKEY", {"A BUL - RUM", "A CON - BUL", "F BLA S A BUL - RUM"});
game.process();

LOG(INFO) << "\nTesting state: W1901A ";
{ // state tests: W1901A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1901A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "F GRE", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NWG", "A YOR", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A SPA", "F POR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A HOL", "F DEN", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A APU", "F ION", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F RUM", "A NWY", "A GAL", "F SWE"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F BLA", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "GRE", "TRI", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "WAR", "RUM", "SWE", "NWY"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1901A
LOG(INFO) << "\nPreparing to process: W1901A ";

// Submit orders
game.process();

LOG(INFO) << "\nTesting state: S1902M ";
{ // state tests: S1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "F GRE", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F NWG", "A YOR", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A SPA", "F POR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A HOL", "F DEN", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A APU", "F ION", "A VEN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F RUM", "A NWY", "A GAL", "F SWE"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F BLA", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "GRE", "TRI", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "WAR", "RUM", "SWE", "NWY"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1902M
LOG(INFO) << "\nPreparing to process: S1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"F GRE - AEG", "A SER - RUM", "A BUD S A SER - RUM"});
game.set_orders("ENGLAND", {"F NTH C A YOR - NWY", "F NWG - BAR", "A YOR - NWY VIA"});
game.set_orders("FRANCE", {"F POR - MAO", "A SPA - GAS", "A BEL H"});
game.set_orders("GERMANY", {"F DEN - HEL", "A MUN - TYR", "A HOL - RUH"});
game.set_orders("ITALY", {"F ION C A APU - TUN", "A APU - TUN VIA", "A VEN H"});
game.set_orders("RUSSIA", {"F RUM H", "A NWY H", "A GAL H", "F SWE H"});
game.set_orders("TURKEY", {"A BUL - RUM", "A CON - BUL", "F BLA S A BUL - RUM"});
game.process();

LOG(INFO) << "\nTesting state: F1902M ";
{ // state tests: F1902M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1902M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "F AEG", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BAR", "A YOR", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A GAS", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A TYR", "F HEL", "A RUH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A VEN", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F RUM", "A NWY", "A GAL", "F SWE"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F BLA", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "GRE", "TRI", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "WAR", "RUM", "SWE", "NWY"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1902M
LOG(INFO) << "\nPreparing to process: F1902M ";

// Submit orders
game.set_orders("AUSTRIA", {"A SER - BUL", "A BUD - GAL", "F AEG S A SER - BUL"});
game.set_orders("ENGLAND", {"F NTH C A YOR - NWY", "A YOR - NWY VIA", "F BAR S A YOR - NWY"});
game.set_orders("FRANCE", {"A GAS - BUR", "A BEL S A GAS - BUR", "F MAO H"});
game.set_orders("GERMANY", {"F HEL H", "A RUH H", "A TYR H"});
game.set_orders("ITALY", {"A VEN - TRI", "F ION - GRE", "A TUN H"});
game.set_orders("RUSSIA", {"A NWY - STP", "F RUM H", "A GAL H", "F SWE S A NWY - STP"});
game.set_orders("TURKEY", {"F BLA - RUM", "A BUL S F BLA - RUM", "A CON S A BUL"});
game.process();

LOG(INFO) << "\nTesting state: W1902A ";
{ // state tests: W1902A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1902A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "F AEG", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BAR", "A NWY", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A BUR", "F MAO"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A TYR", "F HEL", "A RUH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A TRI", "F GRE", "A TUN"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A STP", "F RUM", "A GAL", "F SWE"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F BLA", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "NWY", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TRI", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "RUM", "WAR", "SWE"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1902A
LOG(INFO) << "\nPreparing to process: W1902A ";

// Submit orders
game.set_orders("ENGLAND", {"A EDI B"});
game.set_orders("FRANCE", {"A MAR B", "F BRE B", "A PAR B"});
game.set_orders("GERMANY", {"A KIE B", "A BER B"});
game.set_orders("ITALY", {"F ROM B", "F NAP B", "A VEN B"});
game.set_orders("RUSSIA", {"F SEV B", "A MOS B"});
game.set_orders("TURKEY", {"F SMY B"});
game.process();

LOG(INFO) << "\nTesting state: S1903M ";
{ // state tests: S1903M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1903M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "F AEG", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"F BAR", "A NWY", "A EDI", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F BRE", "A BEL", "A MAR", "F MAO", "A BUR", "A PAR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER", "A TYR", "F HEL", "A KIE", "A RUH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A TRI", "A TUN", "A VEN", "F ROM", "F GRE", "F NAP"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F RUM", "A GAL", "A MOS", "F SWE", "A STP", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F BLA", "A BUL", "F SMY"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "NWY", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TRI", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "RUM", "WAR", "SWE"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1903M
LOG(INFO) << "\nPreparing to process: S1903M ";

// Submit orders
game.set_orders("AUSTRIA", {"A SER - TRI", "F AEG - GRE", "A BUD S A SER - TRI"});
game.set_orders("ENGLAND", {"F NTH C A EDI - DEN", "F BAR - STP/NC", "A NWY - SWE", "A EDI - DEN VIA"});
game.set_orders("FRANCE", {"A MAR - BUR", "A BUR - MUN", "F MAO - WES", "A BEL - HOL", "A PAR - PIC", "F BRE - MAO"});
game.set_orders("GERMANY", {"A KIE - RUH", "F HEL - NTH", "A TYR - VIE", "A BER - MUN", "A RUH - HOL"});
game.set_orders("ITALY", {"F ROM - TYS", "F NAP - ION", "A TUN H", "A TRI H", "F GRE H", "A VEN H"});
game.set_orders("RUSSIA", {"F SEV - BLA", "A STP - NWY", "A MOS - WAR", "A GAL S F RUM", "F RUM S F SEV - BLA", "F SWE S A STP - NWY"});
game.set_orders("TURKEY", {"A BUL - RUM", "F SMY - AEG", "A CON - BUL", "F BLA S A BUL - RUM"});
game.process();

LOG(INFO) << "\nTesting state: S1903R ";
{ // state tests: S1903R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1903R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "F AEG"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A DEN", "F STP/NC", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A MAR", "F MAO", "F WES", "A PIC", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER", "F HEL", "A KIE", "A VIE", "A RUH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A TUN", "F TYS", "A VEN", "F GRE"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F RUM", "A GAL", "F SWE", "A NWY", "A WAR", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F BLA", "A BUL", "F SMY"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "NWY", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TRI", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "RUM", "WAR", "SWE"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1903R
LOG(INFO) << "\nPreparing to process: S1903R ";

// Submit orders
game.set_orders("ENGLAND", {"A NWY R FIN"});
game.set_orders("ITALY", {"A TRI R ALB"});
game.process();

LOG(INFO) << "\nTesting state: F1903M ";
{ // state tests: F1903M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1903M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "F AEG"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A DEN", "A FIN", "F STP/NC", "F NTH"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A MAR", "F MAO", "F WES", "A PIC", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER", "F HEL", "A KIE", "A VIE", "A RUH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F ION", "A TUN", "A ALB", "F TYS", "A VEN", "F GRE"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"F RUM", "A GAL", "F SWE", "A NWY", "A WAR", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"A CON", "F BLA", "A BUL", "F SMY"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "NWY", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TRI", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "RUM", "WAR", "SWE"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1903M
LOG(INFO) << "\nPreparing to process: F1903M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD - VIE", "F AEG - GRE", "A TRI S A BUD - VIE"});
game.set_orders("ENGLAND", {"A DEN - SWE", "F NTH - NWY", "A FIN S A DEN - SWE", "F STP/NC S F NTH - NWY"});
game.set_orders("FRANCE", {"A PIC - BUR", "A BUR - RUH", "F WES H", "A BEL S A BUR - RUH", "F MAO H", "A MAR H"});
game.set_orders("GERMANY", {"A KIE - HOL", "A BER - MUN", "F HEL - DEN", "A RUH H", "A VIE H"});
game.set_orders("ITALY", {"F ION - ADR", "F TYS - WES", "A TUN H", "A ALB H", "F GRE S A ALB", "A VEN H"});
game.set_orders("RUSSIA", {"F SWE H", "A NWY H", "F SEV H", "A WAR H", "F RUM H", "A GAL H"});
game.set_orders("TURKEY", {"F BLA C A CON - RUM", "A CON - RUM VIA", "F SMY - CON", "A BUL S A CON - RUM"});
game.process();

LOG(INFO) << "\nTesting state: F1903R ";
{ // state tests: F1903R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1903R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A VIE", "F AEG"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "A FIN", "F STP/NC", "F NWY"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A MAR", "F MAO", "F WES", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A HOL", "F DEN", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A TUN", "A ALB", "F TYS", "F ADR", "A VEN", "F GRE"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A GAL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F CON", "F BLA", "A BUL", "A RUM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"LON", "NWY", "EDI", "LVP"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TRI", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "STP", "SEV", "RUM", "WAR", "SWE"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"SMY", "CON", "ANK", "BUL"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1903R
LOG(INFO) << "\nPreparing to process: F1903R ";

// Submit orders
game.set_orders("GERMANY", {"A RUH R KIE", "A VIE R BOH"});
game.set_orders("RUSSIA", {"F SWE D", "F RUM D"});
game.process();

LOG(INFO) << "\nTesting state: W1903A ";
{ // state tests: W1903A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1903A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A VIE", "F AEG"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "A FIN", "F STP/NC", "F NWY"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A MAR", "F MAO", "F WES", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F DEN", "A HOL", "A MUN", "A KIE", "A BOH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A TUN", "A ALB", "F TYS", "F ADR", "A VEN", "F GRE"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A GAL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F CON", "F BLA", "A BUL", "A RUM"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1903A
LOG(INFO) << "\nPreparing to process: W1903A ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD B"});
game.set_orders("ENGLAND", {"F LON B", "F EDI B"});
game.set_orders("ITALY", {"A TUN D"});
game.set_orders("TURKEY", {"F SMY B"});
game.process();

LOG(INFO) << "\nTesting state: S1904M ";
{ // state tests: S1904M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1904M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A VIE", "F AEG", "A BUD"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "F LON", "F NWY", "F EDI", "F STP/NC", "A FIN"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A MAR", "F MAO", "F WES", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F DEN", "A HOL", "A MUN", "A KIE", "A BOH"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ALB", "F TYS", "F ADR", "A VEN", "F GRE"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A GAL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F BLA", "F SMY", "F CON", "A RUM", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1904M
LOG(INFO) << "\nPreparing to process: S1904M ";

// Submit orders
game.set_orders("AUSTRIA", {"A TRI - VEN", "A VIE - BOH", "F AEG - BUL/EC", "A BUD - RUM"});
game.set_orders("ENGLAND", {"F NWY - SKA", "A FIN - STP", "F LON - NTH", "F STP/NC - NWY", "F EDI S F LON - NTH", "A SWE H"});
game.set_orders("FRANCE", {"A RUH - HOL", "A BUR - MUN", "F WES H", "F MAO H", "A MAR H", "A BEL S A RUH - HOL"});
game.set_orders("GERMANY", {"F DEN - BAL", "A KIE S A MUN - RUH", "A MUN H", "A BOH H", "A HOL H"});
game.set_orders("ITALY", {"F ADR - TRI", "A VEN S F ADR - TRI", "A ALB S F ADR - TRI", "F TYS H", "F GRE H"});
game.set_orders("RUSSIA", {"A WAR - MOS", "F SEV - RUM", "A GAL S F SEV - RUM"});
game.set_orders("TURKEY", {"F CON - AEG", "F BLA H", "F SMY S F CON - AEG", "A BUL H", "A RUM H"});
game.process();

LOG(INFO) << "\nTesting state: S1904R ";
{ // state tests: S1904R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1904R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "A VIE"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "F NWY", "F EDI", "F NTH", "F SKA", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A MAR", "A HOL", "F MAO", "F WES", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BAL", "A KIE", "A BOH", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ALB", "F TYS", "F TRI", "A VEN", "F GRE"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F RUM", "A GAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F BLA", "A BUL", "F SMY", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1904R
LOG(INFO) << "\nPreparing to process: S1904R ";

// Submit orders
game.set_orders("AUSTRIA", {"F AEG R ION"});
game.process();

LOG(INFO) << "\nTesting state: F1904M ";
{ // state tests: F1904M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1904M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A BUD", "F ION", "A VIE"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "F NWY", "F EDI", "F NTH", "F SKA", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A MAR", "A HOL", "F MAO", "F WES", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BAL", "A KIE", "A BOH", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ALB", "F TYS", "F TRI", "A VEN", "F GRE"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "F RUM", "A GAL"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F BLA", "A BUL", "F SMY", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1904M
LOG(INFO) << "\nPreparing to process: F1904M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD - TRI", "F ION - TUN", "A VIE S A BUD - TRI"});
game.set_orders("ENGLAND", {"F EDI H", "A STP H", "F SKA H", "F NTH H", "A SWE H", "F NWY H"});
game.set_orders("FRANCE", {"A BUR - RUH", "F WES - LYO", "A MAR - BUR", "F MAO - WES", "A BEL S A BUR - RUH", "A HOL S A BUR - RUH"});
game.set_orders("GERMANY", {"A BOH - SIL", "F BAL - BOT", "A MUN - RUH", "A KIE H"});
game.set_orders("ITALY", {"A ALB H", "F TYS H", "F TRI H", "F GRE H", "A VEN H"});
game.set_orders("RUSSIA", {"A GAL - RUM", "F RUM - SEV", "A MOS H"});
game.set_orders("TURKEY", {"F SMY - EAS", "F AEG - GRE", "A BUL - RUM", "F BLA S A BUL - RUM"});
game.process();

LOG(INFO) << "\nTesting state: F1904R ";
{ // state tests: F1904R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1904R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A VIE", "F TUN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "F NWY", "F EDI", "F NTH", "F SKA", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "F LYO", "A HOL", "F WES", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BOT", "A KIE", "A SIL", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VEN", "F GRE", "A ALB", "F TYS"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A GAL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F BLA", "F EAS", "A RUM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"VIE", "BUD", "SER", "TRI"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "HOL", "KIE", "DEN", "BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"GRE", "NAP", "ROM", "TUN", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1904R
LOG(INFO) << "\nPreparing to process: F1904R ";

// Submit orders
game.set_orders("ITALY", {"F TRI R ADR"});
game.process();

LOG(INFO) << "\nTesting state: W1904A ";
{ // state tests: W1904A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1904A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A VIE", "F TUN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "F NWY", "F EDI", "F NTH", "F SKA", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "F LYO", "A HOL", "F WES", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BOT", "A KIE", "A SIL", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A ALB", "F TYS", "F ADR", "A VEN", "F GRE"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A GAL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F BLA", "F EAS", "A RUM", "F AEG"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "HOL", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN", "GRE"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1904A
LOG(INFO) << "\nPreparing to process: W1904A ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD B"});
game.set_orders("FRANCE", {"A MAR B"});
game.set_orders("ITALY", {"A ALB D"});
game.set_orders("TURKEY", {"A CON B"});
game.process();

LOG(INFO) << "\nTesting state: S1905M ";
{ // state tests: S1905M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1905M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "A VIE", "F TUN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "F NWY", "F EDI", "F NTH", "F SKA", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BEL", "A MAR", "F LYO", "A HOL", "F WES", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"F BOT", "A KIE", "A SIL", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VEN", "F GRE", "F ADR", "F TYS"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A GAL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F BLA", "F AEG", "A CON", "A RUM", "F EAS"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "HOL", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN", "GRE"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1905M
LOG(INFO) << "\nPreparing to process: S1905M ";

// Submit orders
game.set_orders("AUSTRIA", {"A BUD - SER", "A TRI H", "F TUN H", "A VIE S A TRI"});
game.set_orders("ENGLAND", {"F EDI - YOR", "F SKA - DEN", "F NWY - STP/NC", "A STP - MOS", "A SWE H", "F NTH S F SKA - DEN"});
game.set_orders("FRANCE", {"A HOL - KIE", "A BEL - HOL", "A BUR - MUN", "A RUH S A HOL - KIE", "F WES H", "A MAR H", "F LYO S F WES"});
game.set_orders("GERMANY", {"F BOT - FIN", "A SIL - WAR", "A KIE H", "A MUN S A KIE"});
game.set_orders("ITALY", {"F ADR H", "F TYS H", "F GRE H", "A VEN H"});
game.set_orders("RUSSIA", {"A GAL - RUM", "A MOS H", "F SEV S A GAL - RUM"});
game.set_orders("TURKEY", {"F EAS - ION", "A CON - BUL", "F BLA S A RUM", "A RUM H", "F AEG S F EAS - ION"});
game.process();

LOG(INFO) << "\nTesting state: S1905R ";
{ // state tests: S1905R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1905R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A SER", "A VIE", "F TUN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "F DEN", "F YOR", "F NWY", "F NTH", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F LYO", "A HOL", "F WES", "A KIE", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A WAR", "F FIN", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VEN", "F GRE", "F ADR", "F TYS"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A GAL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BLA", "F AEG", "A RUM", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "HOL", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN", "GRE"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1905R
LOG(INFO) << "\nPreparing to process: S1905R ";

// Submit orders
game.set_orders("GERMANY", {"A KIE R BER"});
game.process();

LOG(INFO) << "\nTesting state: F1905M ";
{ // state tests: F1905M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1905M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A SER", "A VIE", "F TUN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "F DEN", "F YOR", "F NWY", "F NTH", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A MAR", "F LYO", "A HOL", "F WES", "A KIE", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER", "A WAR", "F FIN", "A MUN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"A VEN", "F GRE", "F ADR", "F TYS"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A MOS", "A GAL", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BLA", "F AEG", "A RUM", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "HOL", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN", "GRE"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1905M
LOG(INFO) << "\nPreparing to process: F1905M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE - BUD", "A SER - RUM", "F TUN H", "A TRI S A VIE - BUD"});
game.set_orders("ENGLAND", {"F DEN - BAL", "F NWY - STP/NC", "F YOR - NTH", "A STP - LVN", "A SWE - FIN", "F NTH - DEN"});
game.set_orders("FRANCE", {"A BUR - MUN", "F WES - NAF", "A KIE - BER", "F LYO - WES", "A RUH S A BUR - MUN", "A MAR H", "A HOL H"});
game.set_orders("GERMANY", {"A WAR H", "A MUN H", "F FIN H", "A BER H"});
game.set_orders("ITALY", {"F ADR H", "F TYS H", "F GRE H", "A VEN H"});
game.set_orders("RUSSIA", {"F SEV - RUM", "A GAL - WAR", "A MOS S A GAL - WAR"});
game.set_orders("TURKEY", {"A BUL - SER", "F BLA - BUL/EC", "F AEG - GRE", "F ION S F AEG - GRE", "A RUM S A BUL - SER"});
game.process();

LOG(INFO) << "\nTesting state: F1905R ";
{ // state tests: F1905R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1905R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "A SER", "F TUN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "A LVN", "F DEN", "F STP/NC", "F NTH", "F BAL"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F NAF", "A MAR", "A HOL", "A MUN", "F WES", "A KIE", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER", "F FIN"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS", "A VEN", "F ADR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A MOS", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BLA", "A RUM", "F GRE", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"BRE", "BEL", "MAR", "HOL", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"MUN", "KIE", "BER", "DEN"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN", "GRE"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1905R
LOG(INFO) << "\nPreparing to process: F1905R ";

// Submit orders
game.set_orders("GERMANY", {"A MUN R BOH", "A WAR R SIL"});
game.set_orders("ITALY", {"F GRE D"});
game.process();

LOG(INFO) << "\nTesting state: W1905A ";
{ // state tests: W1905A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1905A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "A SER", "F TUN"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "A LVN", "F DEN", "F STP/NC", "F NTH", "F BAL"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F NAF", "A MAR", "A HOL", "A MUN", "F WES", "A KIE", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER", "A BOH", "F FIN", "A SIL"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS", "A VEN", "F ADR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A MOS", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BLA", "A RUM", "F GRE", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "DEN", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MUN", "BRE", "BEL", "MAR", "HOL", "KIE", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "GRE", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1905A
LOG(INFO) << "\nPreparing to process: W1905A ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE B"});
game.set_orders("ENGLAND", {"A EDI B"});
game.set_orders("FRANCE", {"F BRE B", "A PAR B"});
game.set_orders("GERMANY", {"F FIN D", "A BOH D", "A SIL D"});
game.set_orders("TURKEY", {"A CON B"});
game.process();

LOG(INFO) << "\nTesting state: S1906M ";
{ // state tests: S1906M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1906M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "F TUN", "A VIE", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A SWE", "A LVN", "F DEN", "A EDI", "F STP/NC", "F NTH", "F BAL"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"F BRE", "F NAF", "A MAR", "A HOL", "A MUN", "F WES", "A KIE", "A PAR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{"A BER"};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS", "A VEN", "F ADR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A MOS", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BLA", "A CON", "A RUM", "F GRE", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "DEN", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MUN", "BRE", "BEL", "MAR", "HOL", "KIE", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "GRE", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1906M
LOG(INFO) << "\nPreparing to process: S1906M ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE - TRI", "A TRI - ALB", "A BUD - RUM", "F TUN - ION", "A SER S A BUD - RUM"});
game.set_orders("ENGLAND", {"F NTH C A EDI - NWY", "A EDI - NWY VIA", "A SWE - FIN", "A LVN - WAR", "F STP/NC H", "F BAL S A KIE - BER", "F DEN H"});
game.set_orders("FRANCE", {"A HOL - KIE", "F NAF - TUN", "A KIE - BER", "A PAR - BUR", "F BRE - MAO", "A RUH H", "F WES S F NAF - TUN", "A MUN S A KIE - BER", "A MAR H"});
game.set_orders("GERMANY", {"A BER H"});
game.set_orders("ITALY", {"F ADR H", "F TYS H", "A VEN H"});
game.set_orders("RUSSIA", {"A MOS H", "F SEV H", "A WAR H"});
game.set_orders("TURKEY", {"F BLA C A CON - SEV", "F ION - TYS", "A CON - SEV VIA", "A BUL S A RUM", "F GRE H", "A RUM S A CON - SEV"});
game.process();

LOG(INFO) << "\nTesting state: S1906R ";
{ // state tests: S1906R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "S1906R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "A ALB", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVN", "F DEN", "A NWY", "F STP/NC", "F NTH", "F BAL", "A FIN"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BER", "A MAR", "F MAO", "F TUN", "A MUN", "F WES", "A KIE", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS", "A VEN", "F ADR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A MOS", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BLA", "A CON", "A RUM", "F GRE", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "DEN", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MUN", "BRE", "BEL", "MAR", "HOL", "KIE", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "GRE", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: S1906R
LOG(INFO) << "\nPreparing to process: S1906R ";

// Submit orders
game.set_orders("GERMANY", {"A BER D"});
game.process();

LOG(INFO) << "\nTesting state: F1906M ";
{ // state tests: F1906M
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1906M");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "A ALB", "A SER"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVN", "F DEN", "A NWY", "F STP/NC", "F NTH", "F BAL", "A FIN"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BER", "A MAR", "F MAO", "F TUN", "A MUN", "F WES", "A KIE", "A BUR", "A RUH"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS", "A VEN", "F ADR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A MOS", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BLA", "A CON", "A RUM", "F GRE", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "DEN", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MUN", "BRE", "BEL", "MAR", "HOL", "KIE", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "GRE", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1906M
LOG(INFO) << "\nPreparing to process: F1906M ";

// Submit orders
game.set_orders("AUSTRIA", {"A ALB - SER", "A SER - RUM", "A TRI H", "A BUD S A SER - RUM"});
game.set_orders("ENGLAND", {"F BAL - BOT", "A FIN - STP", "F STP/NC - BAR", "A LVN - WAR", "A NWY S A FIN - STP", "F NTH H", "F DEN H"});
game.set_orders("FRANCE", {"A RUH - MUN", "A MUN - SIL", "F WES S F TUN", "F TUN H", "A BER S A MUN - SIL", "A BUR H", "F MAO H", "A MAR H", "A KIE H"});
game.set_orders("ITALY", {"F ADR H", "F TYS H", "A VEN H"});
game.set_orders("RUSSIA", {"A WAR H", "A MOS H", "F SEV H"});
game.set_orders("TURKEY", {"F BLA C A CON - SEV", "A BUL - SER", "F ION - TYS", "A CON - SEV VIA", "A RUM S A CON - SEV", "F GRE H"});
game.process();

LOG(INFO) << "\nTesting state: F1906R ";
{ // state tests: F1906R
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "F1906R");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "A ALB", "A RUM"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVN", "F DEN", "F BAR", "A NWY", "F NTH", "F BOT", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BER", "A MAR", "A SIL", "F MAO", "F TUN", "A MUN", "F WES", "A KIE", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS", "A VEN", "F ADR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A MOS", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BLA", "A CON", "F GRE", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "TRI", "VIE", "TUN"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "DEN", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MUN", "BRE", "BEL", "MAR", "HOL", "KIE", "SPA", "PAR", "POR"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{"BER"};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "RUM", "GRE", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: F1906R
LOG(INFO) << "\nPreparing to process: F1906R ";

// Submit orders
game.set_orders("TURKEY", {"A RUM R GAL"});
game.process();

LOG(INFO) << "\nTesting state: W1906A ";
{ // state tests: W1906A
const json& j = game.get_state().to_json();
ASSERT_EQ(game.get_state().get_phase().to_string(), "W1906A");
set<string> units_AUSTRIA = j["units"].contains("AUSTRIA") ? set<string>(j["units"]["AUSTRIA"].begin(), j["units"]["AUSTRIA"].end()) : set<string>();
for (auto it = units_AUSTRIA.begin() ; it != units_AUSTRIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_AUSTRIA.erase(it); } else { ++it; } }
set<string> units_AUSTRIA_exp{"A TRI", "A BUD", "A ALB", "A RUM"};
ASSERT_THAT(units_AUSTRIA, testing::ContainerEq(units_AUSTRIA_exp));
set<string> units_ENGLAND = j["units"].contains("ENGLAND") ? set<string>(j["units"]["ENGLAND"].begin(), j["units"]["ENGLAND"].end()) : set<string>();
for (auto it = units_ENGLAND.begin() ; it != units_ENGLAND.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ENGLAND.erase(it); } else { ++it; } }
set<string> units_ENGLAND_exp{"A LVN", "F DEN", "F BAR", "A NWY", "F NTH", "F BOT", "A STP"};
ASSERT_THAT(units_ENGLAND, testing::ContainerEq(units_ENGLAND_exp));
set<string> units_FRANCE = j["units"].contains("FRANCE") ? set<string>(j["units"]["FRANCE"].begin(), j["units"]["FRANCE"].end()) : set<string>();
for (auto it = units_FRANCE.begin() ; it != units_FRANCE.end() ;) {   if (it->substr(0, 1) == "*") { it = units_FRANCE.erase(it); } else { ++it; } }
set<string> units_FRANCE_exp{"A BER", "A MAR", "A SIL", "F MAO", "F TUN", "A MUN", "F WES", "A KIE", "A BUR"};
ASSERT_THAT(units_FRANCE, testing::ContainerEq(units_FRANCE_exp));
set<string> units_GERMANY = j["units"].contains("GERMANY") ? set<string>(j["units"]["GERMANY"].begin(), j["units"]["GERMANY"].end()) : set<string>();
for (auto it = units_GERMANY.begin() ; it != units_GERMANY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_GERMANY.erase(it); } else { ++it; } }
set<string> units_GERMANY_exp{};
ASSERT_THAT(units_GERMANY, testing::ContainerEq(units_GERMANY_exp));
set<string> units_ITALY = j["units"].contains("ITALY") ? set<string>(j["units"]["ITALY"].begin(), j["units"]["ITALY"].end()) : set<string>();
for (auto it = units_ITALY.begin() ; it != units_ITALY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_ITALY.erase(it); } else { ++it; } }
set<string> units_ITALY_exp{"F TYS", "A VEN", "F ADR"};
ASSERT_THAT(units_ITALY, testing::ContainerEq(units_ITALY_exp));
set<string> units_RUSSIA = j["units"].contains("RUSSIA") ? set<string>(j["units"]["RUSSIA"].begin(), j["units"]["RUSSIA"].end()) : set<string>();
for (auto it = units_RUSSIA.begin() ; it != units_RUSSIA.end() ;) {   if (it->substr(0, 1) == "*") { it = units_RUSSIA.erase(it); } else { ++it; } }
set<string> units_RUSSIA_exp{"A WAR", "A MOS", "F SEV"};
ASSERT_THAT(units_RUSSIA, testing::ContainerEq(units_RUSSIA_exp));
set<string> units_TURKEY = j["units"].contains("TURKEY") ? set<string>(j["units"]["TURKEY"].begin(), j["units"]["TURKEY"].end()) : set<string>();
for (auto it = units_TURKEY.begin() ; it != units_TURKEY.end() ;) {   if (it->substr(0, 1) == "*") { it = units_TURKEY.erase(it); } else { ++it; } }
set<string> units_TURKEY_exp{"F ION", "F BLA", "A GAL", "A CON", "F GRE", "A BUL"};
ASSERT_THAT(units_TURKEY, testing::ContainerEq(units_TURKEY_exp));
set<string> centers_AUSTRIA = j["centers"].contains("AUSTRIA") ? set<string>(j["centers"]["AUSTRIA"].begin(), j["centers"]["AUSTRIA"].end()) : set<string>();
set<string> centers_AUSTRIA_exp{"SER", "BUD", "RUM", "TRI", "VIE"};
ASSERT_THAT(centers_AUSTRIA, testing::ContainerEq(centers_AUSTRIA_exp));
set<string> centers_ENGLAND = j["centers"].contains("ENGLAND") ? set<string>(j["centers"]["ENGLAND"].begin(), j["centers"]["ENGLAND"].end()) : set<string>();
set<string> centers_ENGLAND_exp{"STP", "LVP", "LON", "SWE", "NWY", "DEN", "EDI"};
ASSERT_THAT(centers_ENGLAND, testing::ContainerEq(centers_ENGLAND_exp));
set<string> centers_FRANCE = j["centers"].contains("FRANCE") ? set<string>(j["centers"]["FRANCE"].begin(), j["centers"]["FRANCE"].end()) : set<string>();
set<string> centers_FRANCE_exp{"MUN", "BRE", "BEL", "MAR", "BER", "HOL", "KIE", "SPA", "PAR", "POR", "TUN"};
ASSERT_THAT(centers_FRANCE, testing::ContainerEq(centers_FRANCE_exp));
set<string> centers_GERMANY = j["centers"].contains("GERMANY") ? set<string>(j["centers"]["GERMANY"].begin(), j["centers"]["GERMANY"].end()) : set<string>();
set<string> centers_GERMANY_exp{};
ASSERT_THAT(centers_GERMANY, testing::ContainerEq(centers_GERMANY_exp));
set<string> centers_ITALY = j["centers"].contains("ITALY") ? set<string>(j["centers"]["ITALY"].begin(), j["centers"]["ITALY"].end()) : set<string>();
set<string> centers_ITALY_exp{"NAP", "ROM", "VEN"};
ASSERT_THAT(centers_ITALY, testing::ContainerEq(centers_ITALY_exp));
set<string> centers_RUSSIA = j["centers"].contains("RUSSIA") ? set<string>(j["centers"]["RUSSIA"].begin(), j["centers"]["RUSSIA"].end()) : set<string>();
set<string> centers_RUSSIA_exp{"MOS", "SEV", "WAR"};
ASSERT_THAT(centers_RUSSIA, testing::ContainerEq(centers_RUSSIA_exp));
set<string> centers_TURKEY = j["centers"].contains("TURKEY") ? set<string>(j["centers"]["TURKEY"].begin(), j["centers"]["TURKEY"].end()) : set<string>();
set<string> centers_TURKEY_exp{"CON", "GRE", "BUL", "SMY", "ANK"};
ASSERT_THAT(centers_TURKEY, testing::ContainerEq(centers_TURKEY_exp));
} // state tests: W1906A
LOG(INFO) << "\nPreparing to process: W1906A ";

// Submit orders
game.set_orders("AUSTRIA", {"A VIE B"});
game.set_orders("FRANCE", {"A BRE B", "A PAR B"});
game.set_orders("TURKEY", {"A CON D"});
game.process();


} // TEST_F
} // namespace dipcc

